<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100" height="100"
		 click="group1_clickHandler(event)" 
		 doubleClickEnabled="true" 
		 doubleClick="dbl_clickHandler(event)"
		 creationComplete="creationCompleteHandler(event)"
		 >
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="CharacterIsSelected", type="flash.events.Event")]
		[Event(name="CharacterIsDblClicked", type="flash.events.Event")]
	</fx:Metadata>

	
	<fx:Script>
		<![CDATA[
			import character.Character;
			
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			
			import spark.filters.BevelFilter;
			import spark.primitives.Ellipse;

			[Bindable]
			public var char:Character;
			
			public var index_in_partyview:int;
			public var isSelected:Boolean = false;
			
			protected function group1_clickHandler(event:MouseEvent):void
			{
				//var eventObject:Event = new Event("CharacterIsSelected",true);
				var eventObject:CharacterSelectedEvent = new CharacterSelectedEvent("CharacterIsSelected",true,false,this.char,this.index_in_partyview);				
				
				this.dispatchEvent(eventObject);
			}

			protected function dbl_clickHandler(event:MouseEvent):void
			{
				//var eventObject:Event = new Event("CharacterIsSelected",true);
				var eventObject:CharacterDblClickedEvent = new CharacterDblClickedEvent("CharacterIsDblClicked",true,false,this.char,this.index_in_partyview);				
				
				this.dispatchEvent(eventObject);
			}

			public function updateStatusBar():void{
				var tmpHealth:int;
				tmpHealth = ((char.health_max.getValue() as int)*40)/(char.health_max.getValue());
				this.healthStatusBar.setProgress(tmpHealth,40);
				
				var tmpSpirae:int;
				tmpSpirae = ((char.spirae_max.getValue() as int)*40)/(char.spirae_max.getValue());
				this.spiraeStatusBar.setProgress(tmpSpirae,40);
				
//				var cropArea:Rectangle = new Rectangle( 0, 0, _width, _height );
//				var croppedBitmap:Bitmap = new Bitmap( new BitmapData( _width, _height ), PixelSnapping.ALWAYS, true );
//				croppedBitmap.bitmapData.draw( (displayObject!=null) ? displayObject : stage, new Matrix(1, 0, 0, 1, -_x, -_y) , null, null, cropArea, true );
				
				
				
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				// Manage dropping items from Inventory or Equipped to Character portraits to transfer them.
				addEventListener(DragEvent.DRAG_ENTER, (TyrantsRealm)(this.parentApplication).hud_attribute.character_view.acceptDrop);
				addEventListener(DragEvent.DRAG_DROP, (TyrantsRealm)(this.parentApplication).hud_attribute.character_view.xferItem);
			}
			
			
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center"
						  />
	</s:layout>

	<s:Group id="character_appearance_container"
			 width="100%" height="100%">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
	    <s:BitmapImage id="bmpImg" source="{char.appearance_basebody}" 
					   width="100" height="100" 					
				   	   horizontalAlign="center" maskType="clip">
			
			<s:mask>
				<s:BorderContainer id="bmpMask"
								   cornerRadius="{bmpImg.width}"
								   width="{bmpImg.width}" height="{bmpImg.height}" />
			</s:mask>

		</s:BitmapImage>
		<s:BitmapImage id="basehead" source="{char.appearance_basehead}" 
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_torso" source="{char.appearance_torso}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_head" source="{char.appearance_head}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_legs" source="{char.appearance_legs}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_feet" source="{char.appearance_feet}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_shoulders" source="{char.appearance_shoulders}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_hands" source="{char.appearance_hands}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_weapon" source="{char.appearance_weapon}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>
		<s:BitmapImage id="char_offhand" source="{char.appearance_offhand}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	

	</s:Group>

	<s:HGroup id="health_group">
		<s:Label text="H" fontSize="8"/>
		<mx:ProgressBar id="healthStatusBar"
						mode="manual"
						minimum="0"
						maximum="100" 
						label=""
						width="50"
						height="8"/>
	</s:HGroup>

	<s:HGroup id="spirae_group">
		<s:Label text="S" fontSize="8"/>
		<mx:ProgressBar id="spiraeStatusBar"
						mode="manual"
						minimum="0"
						maximum="100" 
						label=""
						width="50"
						height="8"/>
	</s:HGroup>

</s:Group>


