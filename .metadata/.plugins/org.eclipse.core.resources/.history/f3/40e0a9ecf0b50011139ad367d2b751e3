<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:resizableTitleWindow ="resizableTitleWindow.*"
			   height="180" width="180"
			   creationComplete="creationCompleteHandler(event)"
			   x="1060" y="15">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import away3d.cameras.Camera3D;
			import away3d.core.utils.Color;
			
			import dungeon.Dungeon_6;
			import dungeon.Map;
			
			import flash.display.MovieClip;
			
			import mx.collections.ArrayList;
			import mx.containers.Canvas;
			import mx.core.BitmapAsset;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColor;
			import mx.managers.LayoutManager;
			import mx.managers.PopUpManager;
			
			import spark.components.Group;
			import spark.components.SkinnableContainer;
			import spark.core.MaskType;
			import spark.primitives.BitmapImage;
			import spark.primitives.Ellipse;
			import spark.primitives.Rect;
			import spark.primitives.supportClasses.FilledElement; 

			[Bindable]
			public var map:Map;
						
			public var dungeon3D:Dungeon_6;
			
			private var _grid_width:Number;
			private var _grid_height:Number;//33 is the height of the window bar
			private var _user_position:Rect;			
			private var _offset_x:Number;
			private var _offset_y:Number;
			private var orig_loc_x : Number;
			private var orig_loc_y : Number;
			private var map_group:Group;
			
			
			private function handleCloseEvent():void{
				visible = false;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{	

				map_image.mask=mask;
				
				
				var grid:Rect;
				//grid size is scaled with the size of its container
				_grid_width = (this.width-2)/map.numGridsX;
				_grid_height = (this.height-33)/map.numGridsZ;
				
				// Initial offset to center player position TODO: needs more dynamic work for start location.
				_offset_x = _grid_width *2 -6;
				_offset_y = _grid_height * -5;
							
				// User indicator
				_user_position = new Rect();
				_user_position.fill = new SolidColor(Color.yellow);
				_user_position.width = 5;
				_user_position.height = 5;
				_user_position.x = mask.width / 2;;
				_user_position.y = mask.height / 2 + 35;   // Adjusted down for the Player labels

				// Set the initial start location absolute coords
				var cam_pos:Vector3D = dungeon3D.getCurCamPos();			
				orig_loc_x =  _grid_width *( int(cam_pos.x/Dungeon_6.gridWidth) + (cam_pos.x % Dungeon_6.gridWidth)/Dungeon_6.gridWidth);
				orig_loc_y = 70+(2*_grid_height)+_grid_height*map.numGridsZ - _grid_height * (int(cam_pos.z/Dungeon_6.gridHeight) 
					+ (cam_pos.z % Dungeon_6.gridDepth)/Dungeon_6.gridDepth);

				
				map_group = new Group();
				for (var i:int = 0; i<map.numGridsX; i++)
					for (var j:int =0; j<map.numGridsZ; j++){
						if (map.map_array[i][j] != null){
							grid = new Rect();							
							grid.x = i* _grid_width;
							// Mark: Manually shifted y by 70 down to handle display offset of Player information
							grid.y = 70+(2*_grid_height)+_grid_height*(map.numGridsZ-1) - j* _grid_height;
							grid.width = _grid_width;
							grid.height = _grid_height;
							grid.fill = new SolidColor(Color.black);						
							map_group.addElement(grid);
						}		
					}
				map_image.addElement(map_group);
				addEventListener(Event.ENTER_FRAME, _updateCameraPosition);
			}
			
			private function _updateCameraPosition(e:Event):void{
				var cam_pos:Vector3D = dungeon3D.getCurCamPos();			
				var curr_loc_x:Number;
				var curr_loc_y:Number;
				
				curr_loc_x =  _grid_width *( int(cam_pos.x/Dungeon_6.gridWidth) + (cam_pos.x % Dungeon_6.gridWidth)/Dungeon_6.gridWidth);
				curr_loc_y = 70+(2*_grid_height)+_grid_height*map.numGridsZ - _grid_height * (int(cam_pos.z/Dungeon_6.gridHeight) 
										+ (cam_pos.z % Dungeon_6.gridDepth)/Dungeon_6.gridDepth);
				map_group.x = _offset_x + (orig_loc_x - curr_loc_x);
				map_group.y = _offset_y + (orig_loc_y - curr_loc_y);
				
				
				this.addElement(_user_position);
				
				// Update Server Time
				var currDate:Date = new Date();
				var time:String;
				if (currDate.hours < 10) time = "0"+currDate.hours.toString(10)+":";
				else time = currDate.hours.toString(10)+":";
				if (currDate.minutes < 10) time = time+"0"+currDate.minutes.toString(10);
				else time = time+currDate.minutes.toString(10);
				map_system_time.text = "Server Time: "+time; 
				
				trace(cam_pos.x/Dungeon_6.gridWidth );
				trace(cam_pos.z % Dungeon_6.gridDepth);
			}
			
		]]>
	</fx:Script>
	<s:Group id="player_info_on_map"
			 width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center"
						  gap="5"/>
		</s:layout>
		<s:Label id="map_player_name" text="Player: " fontWeight="bold"  fontSize="18"/> 
		<s:Label id="map_player_denarii" text="Denarii: " fontWeight="bold"  fontSize="18"/>
		<s:Label id="map_player_stater" text="Stater: " fontWeight="bold"  fontSize="18"/>
	</s:Group>
	
	<s:Graphic id="mask" maskType="{MaskType.ALPHA}" cacheAsBitmap="true" > 
		<s:Ellipse y="70" width="200" height="200"> 
			<s:fill> 
				<s:SolidColor color="0xDDAAAA" /> 
			</s:fill> 
		</s:Ellipse> 
	</s:Graphic> 
	<s:Group id="map_image">
		<mx:Image  
			id="circle" width="500" height="500" x="-200"
			source="assets/HUD/mapBackground.jpg" cacheAsBitmap="true" />
	</s:Group>
	<s:Group id="time_label">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		<s:Label id="map_system_time" text="" fontWeight="bold"  fontSize="18" y="280" x="20"/> 
	</s:Group>
			 
</s:Group>
