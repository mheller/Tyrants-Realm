<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="900" height="750"
			   title="Dungeon Map"
			   close="handleCloseEvent();"
			   creationComplete="creationCompleteHandler(event)"

			   >
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import away3d.cameras.Camera3D;
			import away3d.core.utils.Color;
			
			import dungeon.Dungeon_6;
			import dungeon.Map;
			
			import flash.display.MovieClip;
			
			import mx.collections.ArrayList;
			import mx.containers.Canvas;
			import mx.controls.Label;
			import mx.core.BitmapAsset;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.graphics.SolidColor;
			import mx.managers.LayoutManager;
			import mx.managers.PopUpManager;
			
			import resizableTitleWindow.*;
			
			import spark.components.Group;
			import spark.components.SkinnableContainer;
			import spark.components.TitleWindow;
			import spark.core.MaskType;
			import spark.primitives.BitmapImage;
			import spark.primitives.Ellipse;
			import spark.primitives.Rect;
			import spark.primitives.supportClasses.FilledElement;

			[Bindable]
			public var map:Map;
			
			public var dungeon3D:Dungeon_6;
			
			private var _grid_width:Number;
			private var _grid_height:Number;//33 is the height of the window bar
			private var _user_position:Image;			
			private var orig_loc_x : Number;
			private var orig_loc_y : Number;
			private var mainmap_group:Group;
			private var center_offset_x : Number;
			private var center_offset_y : Number;
			

			
			protected function creationCompleteHandler(event:FlexEvent):void
			{	
				
				this.x = (TyrantsRealm)(this.parentApplication).width / 2 - (this.width / 2);
				this.y = (TyrantsRealm)(this.parentApplication).height / 2 - (this.height / 2);
				
				// TODO: Dungeon Title needs parsing from map file.
				this.title = "Den: Level 1 (Sparse Prototype Level 1)";
				
				var cam_pos:Vector3D = dungeon3D.getCurCamPos();			
				var grid:Rect;
				var path:Image;
				
				//grid size is scaled with the size of its container
				_grid_width = (this.width*.65)/map.numGridsX;
				_grid_height = (this.height*.65)/map.numGridsZ;

				center_offset_x = this.width *.35 / 2;  
				center_offset_y = this.height *.02;  
				
				// User indicator
				_user_position = new Image();
				_user_position.width = 15;
				_user_position.height = 15;
				_user_position.x = center_offset_x - 20 +_grid_width *( int(cam_pos.x/Dungeon_6.gridWidth) + (cam_pos.x % Dungeon_6.gridWidth)/Dungeon_6.gridWidth);
				_user_position.y = center_offset_y + 30 + (2*_grid_height)+_grid_height*map.numGridsZ - _grid_height * (int(cam_pos.z/Dungeon_6.gridHeight) 
					+ (cam_pos.z % Dungeon_6.gridDepth)/Dungeon_6.gridDepth);  
				_user_position.source="assets/HUD/Map_Location.png";
				_user_position.cacheAsBitmap=true;
				_user_position.transformX = _user_position.width / 2;
				_user_position.transformY = _user_position.height / 2;				

				_user_position.rotation = dungeon3D.getCurCamRot();
				
//				this.addElement(_user_position); 

				// Set the initial start location absolute coords
				orig_loc_x = _user_position.x;
				orig_loc_y = _user_position.y;

				mainmap_group = new Group();
				for (var i:int = 0; i<map.numGridsX; i++) {
					for (var j:int =0; j<map.numGridsZ; j++){
						if ((map.map_array[i][j] != null) && (map.map_array[i][j].explored == true)){
							path = new Image();
							path.width="41";
							path.height="41";
							switch (map.map_array[i][j].type) {
								case 1 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-1.png";
										 break;
								case 2 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-2.png";
										 break;
								case 3 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-3.png";
										 break;
								case 4 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-4.png";
									break;
								case 5 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-5.png";
									break;
								case 6 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-6.png";
									break;
							}
							path.transformX = path.width / 2;
							path.transformY = path.height / 2;				
							path.rotation = 90*map.map_array[i][j].rotation;
							path.cacheAsBitmap=true;
							path.x = center_offset_x+i* 40;
							path.y = center_offset_y+(2*40)+40*(map.numGridsZ-1) - j* 40;
							

							mainmap_group.addElement(path); 
							
						}
						
						else {
							/*							hidden = new Image();
							hidden.x = i* _grid_width;
							hidden.y = 70+(2*_grid_height)+_grid_height*(map.numGridsZ-1) - j* _grid_height;
							hidden.width = _grid_width;
							hidden.height = _grid_height;
							hidden.source = "assets/HUD/minimap-grey-fog.png";
							hidden.cacheAsBitmap = true; 
							map_group.addElement(hidden);*/
						} 
					}
				}
//				map_bg.addElement(mainmap_group);
				this.addElement(mainmap_group);	
				this.addElement(_user_position);
				addEventListener(Event.ENTER_FRAME, _updateCameraPosition2);
			}

			private function _updateCameraPosition2(e:Event):void{
				var cam_pos:Vector3D = dungeon3D.getCurCamPos();			
				var grid:Rect;
				var path:Image;
				
				// Where is the player now
				_user_position.x = center_offset_x - 20 +_grid_width *( int(cam_pos.x/Dungeon_6.gridWidth) + (cam_pos.x % Dungeon_6.gridWidth)/Dungeon_6.gridWidth);
				_user_position.y = center_offset_y + 30 + (2*_grid_height)+_grid_height*map.numGridsZ - _grid_height * (int(cam_pos.z/Dungeon_6.gridHeight) 
					+ (cam_pos.z % Dungeon_6.gridDepth)/Dungeon_6.gridDepth);  
				_user_position.rotation = dungeon3D.getCurCamRot();

				// Reset MiniMap for explored squares
				mainmap_group.removeAllElements();
//				map_bg.removeElementAt(1);
//				this.removeElement(mainmap_group);
//				mainmap_group = new Group();
				
				for (var i:int = 0; i<map.numGridsX; i++) {
					for (var j:int =0; j<map.numGridsZ; j++){
						if ((map.map_array[i][j] != null) && (map.map_array[i][j].explored == true)){
							path = new Image();
							path.width="41";
							path.height="41";
							switch (map.map_array[i][j].type) {
								case 1 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-1.png";
									break;
								case 2 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-2.png";
									break;
								case 3 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-3.png";
									break;
								case 4 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-4.png";
									break;
								case 5 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-5.png";
									break;
								case 6 : path.source = "assets/HUD/Dungeons/Den1/minimap-den1-6.png";
									break;
							}
							path.transformX = path.width / 2;
							path.transformY = path.height / 2;				
							path.rotation = 90*map.map_array[i][j].rotation;
							path.cacheAsBitmap=true;
							path.x = center_offset_x+i* 40;
							path.y = center_offset_y+(2*40)+40*(map.numGridsZ-1) - j* 40;
							
							path.visible=true;
							mainmap_group.addElement(path); 
						}		
						else {
//							if ((map.map_array[i][j] != null) && (map.map_array[i][j].explored == false)){

/*								grid = new Rect();							
								grid.x = i* _grid_width;
								// Mark: Manually shifted y by 70 down to handle display offset of Player information
								grid.y = 70+(2*_grid_height)+_grid_height*(map.numGridsZ-1) - j* _grid_height;
								grid.width = _grid_width;
								grid.height = _grid_height;
								grid.fill = new SolidColor(0x333333,.6);						
								map_group.addElement(grid); */
								/*								hidden = new Image();
								hidden.x = i* _grid_width;
								hidden.y = 70+(2*_grid_height)+_grid_height*(map.numGridsZ-1) - j* _grid_height;
								hidden.width = _grid_width;
								hidden.height = _grid_height;
								hidden.source = "assets/HUD/minimap-grey-fog.png";
								hidden.cacheAsBitmap = true; 
								map_group.addElement(hidden);*/
//							}
						} 
					}
				}
				mainmap_group.visible=true;
//				this.removeElementAt(1);
//				this.addElementAt(mainmap_group, 1);
//				this.invalidateDisplayList();
				
			}

			
			private function handleCloseEvent():void{
				visible = false;		
			}		
		]]>
	</fx:Script>
	
	<s:Group id="map_bg" x="-1">
		<mx:Image  
			id="background" width="{this.width-2}" height="{this.height}"
			source="assets/HUD/mapBackground.jpg" cacheAsBitmap="true"/>
	</s:Group>

</s:TitleWindow>
