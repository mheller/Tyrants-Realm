<?xml version="1.0" encoding="utf-8"?>

<s:TitleWindow
			   xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:views="views.*"
			   xmlns:pkgInventory="pkgInventory.*"
			   width="100%"  height="644"
			   minWidth="650" minHeight="600"
			   x="126"
			   title="Character View"
			   xmlns:resizableTitleWindow ="resizableTitleWindow.*"
			   creationComplete="creationCompleteHandler(event)"
			   close="handleCloseEvent();"
			   >
		
		   
	<s:layout>
		<s:HorizontalLayout paddingLeft="0" paddingRight="0" gap="0"/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import character.Character;
			
			import events.DragDropEvent;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.BitmapAsset;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.utils.OnDemandEventDispatcher;
			
			import pkgInventory.Item;
			import pkgInventory.ItemStack;
			import pkgInventory.ItemStackView;
			
			import pkgParty.CharacterSelectedEvent;
			import pkgParty.Party;

			
			[Bindable]
			public var char:Character;	
			
			[Bindable]
			public var party:Party;	

			
			public var item:Item;
			
			private function handleCloseEvent():void{
				visible = false;
			}		
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{		
					addEventListener(DragDropEvent.DRAG_FROM_CHARACTER,handleDragFromCharacter);	
					addEventListener(DragDropEvent.DRAG_FROM_INVENTORY,handleDragFromInventory);
					character_appearance_container.addEventListener(DragEvent.DRAG_ENTER, acceptDrop);
					character_appearance_container.addEventListener(DragEvent.DRAG_DROP, handleDrop);
					
					// capture the event pop up by party window
					this.systemManager.addEventListener("CharacterIsSelected",handleCharacterSelected);
			}
			
			
			private function handleCharacterSelected(event:CharacterSelectedEvent):void {
				//Alert.show("Event change character");
				this.char = party.currChar;
				
				//recreate the list view when different character is selected
				current_list_view1.createListView();
			}


			public function nextAvailableInventorySpot(char:Character,src:ItemStack):ItemStack{
				var tempItemStack:ItemStack;
				var source:ItemStack = src;
				tempItemStack = char.inventory.iStack1;   // inv slot 1
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
					
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
						
					}						
				}	
				tempItemStack = char.inventory.iStack2; // inv slot 2
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
					
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack3; // inv slot 3
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
					
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;					
					}						
				}	
				tempItemStack = char.inventory.iStack4; // inv slot 4
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;					
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
						
					}						
				}	
				tempItemStack = char.inventory.iStack5;   // inv slot 5
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack6; // inv slot 6
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;			
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
						
					}						
				}	
				tempItemStack = char.inventory.iStack7;  // inv slot 7
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
					
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
						
					}						
				}	
				tempItemStack = char.inventory.iStack8; // inv slot 8
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
					
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack9;  // inv slot 9
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
					
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack10;  // inv slot 10
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
					
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
						
					}						
				}	
				tempItemStack = char.inventory.iStack11;  // inv slot 11
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack12;  // inv slot 12
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack13;  // inv slot 13
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack14;  // inv slot 14
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack15;  // inv slot 15
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack16;  // inv slot 16
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack17;  // inv slot 17
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack18;  // inv slot 18
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack19;  // inv slot 19
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack20;  // inv slot 20
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				tempItemStack = char.inventory.iStack21;  // inv slot 21
				if (tempItemStack.currSize == 0) {
					// First open spot
					return tempItemStack;
				}
				else { // Not empty, but maybe stackable?
					if (tempItemStack.item.itemID == source.item.itemID && tempItemStack.item.isStackable && tempItemStack.currSize < tempItemStack.maxSize){
						return tempItemStack;
					}						
				}	
				return null;			
			}
			
			public function handleDragFromCharacter(event:DragDropEvent):void{
				trace("drag from character - Removing Equipped Item");
				var source:ItemStack = ((DragDropEvent)(event)).src as ItemStack;
				source.owner = char;
				var target:ItemStack = ((DragDropEvent)(event)).tar as ItemStack;
				target.owner = char;
				trace("Target Max: "+ target.maxSize);
				
				if (source == target) return; // Drag and drop onto the same spot.
				
				// Test for swapping dual slot items
				var tempSlot:int = source.item.itemSlot;
				var dualSlotSwap:Boolean = false;
				if ((tempSlot == 9) && (target == char.current_items.list_itemStacks.getItemAt(10)))
					dualSlotSwap = true;
				if ((tempSlot == 12) && (target == char.current_items.list_itemStacks.getItemAt(14)))
					dualSlotSwap = true;
				if ((tempSlot == 13) && (target == char.current_items.list_itemStacks.getItemAt(16)))
					dualSlotSwap = true;
				
				
				if (target.currSize > 0 && dualSlotSwap == false) { // Target has an item already there
					if (target.item.itemID == source.item.itemID && target.item.isStackable && target.currSize < target.maxSize) {   // Same item, is stackable and not a full stack
						// No action, same flow as empty target
					}
					else {    // Item is present and either its a different type, isn't stackable or the stack is full; each case requires app to find another open slot if available.

						// Look for another slot if one exists, otherwise exit
						target = nextAvailableInventorySpot(char, source);

						if (target == null) { 
							Alert.show("There are no inventory slots available.");
							return;  
						}
					}						

				}
								
				// Move item
				var storage:ItemStack = new ItemStack(1);
				storage.owner = char;
				if (dualSlotSwap == true) {
					storage.pushItemFromSimilarStack(source);
					source.pushItemFromSimilarStack(target);
					target.pushItemFromSimilarStack(storage);
				}
				else {
					target.pushItemFromSimilarStack(source);  
					// Clear item from 2D if applicable  
					switch (target.item.itemSlot) { 
						case 0 : 	break; // Can't ever happen as slot type is unequipable
	 					case 1 : 	char.appearance_head = null;
									source.displayPath = "assets/HUD/Inventory/Icons/Head.jpg";
									break;
						case 2 :	char.appearance_torso = null;
									source.displayPath = "assets/HUD/Inventory/Icons/Torso.jpg";
									break;
						case 3 :	char.appearance_legs = null;
									source.displayPath = "assets/HUD/Inventory/Icons/Legs.jpg";
									break;
						case 4 :	char.appearance_feet = null;
									source.displayPath = "assets/HUD/Inventory/Icons/Legs.jpg";
									break;
						case 5 : 	char.appearance_hands = null;
									source.displayPath = "assets/HUD/Inventory/Icons/Hands.jpg";
									break;
						case 6 :	char.appearance_shoulders = null;
									source.displayPath = "assets/HUD/Inventory/Icons/Shoulders.jpg";
									break;
						case 7 : 	source.displayPath = "assets/HUD/Inventory/Icons/Cloak.jpg";
						case 8 :	char.appearance_offhand = null;
									source.displayPath = "assets/HUD/Inventory/Icons/OffHand.jpg";
									break;
						case 9 :	source.displayPath = "assets/HUD/Inventory/Icons/Ring.jpg";
									break;
						case 10 : 	source.displayPath = "assets/HUD/Inventory/Icons/Neck.jpg";
									break;
						case 11 : 	source.displayPath = "assets/HUD/Inventory/Icons/Belt.jpg";
									break;
						case 12 : 	source.displayPath = "assets/HUD/Inventory/Icons/BeltAcc.jpg";
									break;
						case 13 :	source.displayPath = "assets/HUD/Inventory/Icons/Trailing.jpg";
									break;
						case 14: 	char.appearance_weapon = null;
									source.displayPath = "assets/HUD/Inventory/Icons/Weapon.jpg";
									char.damage_type.value = "Fists";
									break;
					}
	//				char.appearance_weapon = null;
	
					// Update benefits   TODO: Adjust for items that are use cases (like potions)
					for(var i:int=0; i<target.item.item_benefit.length;i++){
						if (target.item.item_benefit.getItemAt(i).text == "Min Phys Dmg") {
							char.phys_dmg.value = char.phys_dmg.value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Max Phys Dmg") {
							char.phys_dmg.max_value = char.phys_dmg.max_value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Fitness") {
							char.fitness.value = char.fitness.value - (int)(target.item.item_benefit.getItemAt(i).value);
							char.fitness.max_value = char.fitness.max_value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Mental") {
							char.mental_prowess.value = char.mental_prowess.value - (int)(target.item.item_benefit.getItemAt(i).value);
							char.mental_prowess.max_value = char.mental_prowess.max_value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						} 
						if (target.item.item_benefit.getItemAt(i).text == "Spirit") {
							char.spirituality.value = char.spirituality.value - (int)(target.item.item_benefit.getItemAt(i).value);
							char.spirituality.max_value = char.spirituality.max_value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue; 
						}
						if (target.item.item_benefit.getItemAt(i).text == "Eloquence") {
							char.eloquence.value = char.eloquence.value - (int)(target.item.item_benefit.getItemAt(i).value);
							char.eloquence.max_value = char.eloquence.max_value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Coordination") {
							char.coordination.value = char.coordination.value - (int)(target.item.item_benefit.getItemAt(i).value);
							char.coordination.max_value = char.coordination.max_value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Health") {
							char.health_current.value = char.health_current.value - (int)(target.item.item_benefit.getItemAt(i).value);
							if (char.health_current.value <= 0)
								char.health_current.value = 1;
							char.health_max.value = char.health_max.value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Spirae") {
							char.spirae_current.value = char.spirae_current.value - (int)(target.item.item_benefit.getItemAt(i).value);
							if (char.spirae_current.value < 0)
								char.spirae_current.value = 0;
							char.spirae_max.value = char.spirae_max.value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Exp Bonus") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Gold Bonus") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Avoidance") {
							char.avoidance.value = char.avoidance.value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Hit") {
							char.hit.value = char.hit.value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Damage") {
							char.damage_resistance.value = char.damage_resistance.value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Cold") {
							char.cold_resistance.value = char.cold_resistance.value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Heat") {
							char.heat_resistance.value = char.heat_resistance.value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Magic") {
							char.magic_resistance.value = char.magic_resistance.value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Max Magic Dmg") {
							char.magic_dmg.max_value = char.magic_dmg.max_value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Min Magic Dmg") {
							char.magic_dmg.value = char.magic_dmg.value - (int)(target.item.item_benefit.getItemAt(i).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Wander") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Const Cost") {
							// TODO: Add in after create Player-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Inc Monster") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(i).text == "Dec Monster") {
							// TODO: Add in after create Party-Stats
							continue;
						}
	
					}
				}
			}
/*
			*** Benefit Types: Fitness, Mental, Spirit, Eloquence, Coordination, Health, Spirae, 
			Experience Bonus, Gold Bonus, Avoidance, Hit, Dmg Res, Cold Res, Heat Res, Magic Res, 
			Max Phys Dmg, Min Phys Dmg, Max Magic Dmg, Min Magic Dmg, Wander, Construction Cost, 
			increased monster freq and decreased monster freq.
*/
			
			public function handleDragFromInventory(event:DragDropEvent):void{
				trace("drag from inventory");
				var source:ItemStack = ((DragDropEvent)(event)).src as ItemStack;
				
				var same_category:Boolean = false;
				var itemS:ItemStack=ItemStack(char.current_items.list_itemStacks.getItemAt(0));
				itemS.owner = char;
				var targetOrig:ItemStack = ((DragDropEvent)(event)).tar as ItemStack;
				targetOrig.owner = char;
				
				var temp:int = source.item.itemSlot;   // source item slot type
				if (temp == 0) return; // Unequipable item
				if (temp == 14) temp = 0; // Place weapons in the first slot.
				if (temp == 13) temp = 15; // Trailing adjustment
				if (temp == 12) temp = 13; // Belt attachment adjustment
				if (temp == 11) temp = 12; // Belt adjustment
				if (temp == 10) temp = 11; // Neck item adjustment

				var target:ItemStack = ItemStack(char.current_items.list_itemStacks.getItemAt(temp));
				target.owner = char;

				// Check if drag target is also the correct slot of item, used for dual slots
				// If target matches, then use that slot regardless of if something is in it (swap if there is). Don't fail over to the secondary slot
				if (targetOrig == target) {    
					same_category = true;	
				}
				if ((temp == 9) && (targetOrig == ItemStack(char.current_items.list_itemStacks.getItemAt(temp+1)))) {   // Rings
					same_category = true;
					target = ItemStack(char.current_items.list_itemStacks.getItemAt(temp+1))
				}
				if ((temp == 13) && (targetOrig == ItemStack(char.current_items.list_itemStacks.getItemAt(temp+1)))) {  // Belt Attachment
					same_category = true;
					target = ItemStack(char.current_items.list_itemStacks.getItemAt(temp+1))					
				}
				if ((temp == 15) && (targetOrig == ItemStack(char.current_items.list_itemStacks.getItemAt(temp+1)))) {  // Trailing
					same_category = true;
					target = ItemStack(char.current_items.list_itemStacks.getItemAt(temp+1))					
				}

				var storage:ItemStack = new ItemStack(target.maxSize);
				storage.owner = char;
				var benefitStorage:ItemStack;
				var k:int;
				
				
				// Adjustments for dual slot items. Assumes drag was to any other item slot besides correct target, then check for available slot
				if (same_category == false) {
					if ((target.currSize > 0) && (temp == 9))   // Slot 1 of ring is full, shift to slot 2
						target = ItemStack(char.current_items.list_itemStacks.getItemAt(10));
					
					if ((target.currSize > 0) && (temp == 13))   // Slot 1 of belt attachment is full, shift to slot 2
						target = ItemStack(char.current_items.list_itemStacks.getItemAt(14));
					
					if ((target.currSize > 0) && (temp == 15))   // Slot 1 of trailing is full, shift to slot 2
						target = ItemStack(char.current_items.list_itemStacks.getItemAt(16));
				}
				// Set the image and benefits
				if (target.currSize > 0){
					///////
					// Switch the weapons
					storage.pushItemFromSimilarStack(target);						
					target.pushItemFromSimilarStack(source);
					
					// Look for another slot if one exists, otherwise exit
					var spotFound:Boolean = false;
					var tempItemStack:ItemStack;
					tempItemStack = char.inventory.iStack1;   // inv slot 1

					tempItemStack = nextAvailableInventorySpot(char, storage);
					
					if (tempItemStack == null) { 
						source.pushItemFromSimilarStack(target);
						target.pushItemFromSimilarStack(storage);
						Alert.show("There are no inventory slots available to exchange items.");
						return;
					}
					tempItemStack.pushItemFromSimilarStack(storage);
					benefitStorage=tempItemStack;
					
					// Set the picture based on the type of item
					if (target.item.itemSlot == 14) {
						char.appearance_weapon = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
						char.damage_type.value = target.item.itemTitle;
					}
					if (target.item.itemSlot == 8)
						char.appearance_offhand = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 2)
						char.appearance_torso = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 3)
						char.appearance_legs = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 4)
						char.appearance_feet = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 6)
						char.appearance_shoulders = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 5)
						char.appearance_hands = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 1)
						char.appearance_head = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					
					// Outgoing Item
					
					for(k=0; k<benefitStorage.item.item_benefit.length;k++){
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Min Phys Dmg") {
							char.phys_dmg.value = char.phys_dmg.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Max Phys Dmg") {
							char.phys_dmg.max_value = char.phys_dmg.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Fitness") {
							char.fitness.value = char.fitness.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							char.fitness.max_value = char.fitness.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Mental") {
							char.mental_prowess.value = char.mental_prowess.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							char.mental_prowess.max_value = char.mental_prowess.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						} 
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Spirit") {
							char.spirituality.value = char.spirituality.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							char.spirituality.max_value = char.spirituality.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue; 
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Eloquence") {
							char.eloquence.value = char.eloquence.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							char.eloquence.max_value = char.eloquence.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Coordination") {
							char.coordination.value = char.coordination.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							char.coordination.max_value = char.coordination.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Health") {
							char.health_current.value = char.health_current.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							char.health_max.value = char.health_max.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Spirae") {
							char.spirae_current.value = char.spirae_current.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							char.spirae_max.value = char.spirae_max.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Exp Bonus") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Gold Bonus") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Avoidance") {
							char.avoidance.value = char.avoidance.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Hit") {
							char.hit.value = char.hit.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Damage") {
							char.damage_resistance.value = char.damage_resistance.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Cold") {
							char.cold_resistance.value = char.cold_resistance.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Heat") {
							char.heat_resistance.value = char.heat_resistance.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Magic") {
							char.magic_resistance.value = char.magic_resistance.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Max Magic Dmg") {
							char.magic_dmg.max_value = char.magic_dmg.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Min Magic Dmg") {
							char.magic_dmg.value = char.magic_dmg.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Wander") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Const Cost") {
							// TODO: Add in after create Player-Stats
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Inc Monster") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (benefitStorage.item.item_benefit.getItemAt(k).text == "Dec Monster") {
							// TODO: Add in after create Party-Stats
							continue;
						} 
						
					}
					
					// Incoming Item
					for(k=0; k<target.item.item_benefit.length;k++){
						if (target.item.item_benefit.getItemAt(k).text == "Min Phys Dmg") {
							char.phys_dmg.value = char.phys_dmg.value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Max Phys Dmg") {
							char.phys_dmg.max_value = char.phys_dmg.max_value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Fitness") {
							char.fitness.value = char.fitness.value + (int)(target.item.item_benefit.getItemAt(k).value);
							char.fitness.max_value = char.fitness.max_value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Mental") {
							char.mental_prowess.value = char.mental_prowess.value + (int)(target.item.item_benefit.getItemAt(k).value);
							char.mental_prowess.max_value = char.mental_prowess.max_value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						} 
						if (target.item.item_benefit.getItemAt(k).text == "Spirit") {
							char.spirituality.value = char.spirituality.value + (int)(target.item.item_benefit.getItemAt(k).value);
							char.spirituality.max_value = char.spirituality.max_value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue; 
						}
						if (target.item.item_benefit.getItemAt(k).text == "Eloquence") {
							char.eloquence.value = char.eloquence.value + (int)(target.item.item_benefit.getItemAt(k).value);
							char.eloquence.max_value = char.eloquence.max_value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Coordination") {
							char.coordination.value = char.coordination.value + (int)(target.item.item_benefit.getItemAt(k).value);
							char.coordination.max_value = char.coordination.max_value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Health") {
							char.health_current.value = char.health_current.value + (int)(target.item.item_benefit.getItemAt(k).value);
							char.health_max.value = char.health_max.value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Spirae") {
							char.spirae_current.value = char.spirae_current.value + (int)(target.item.item_benefit.getItemAt(k).value);
							char.spirae_max.value = char.spirae_max.value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Exp Bonus") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Gold Bonus") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Avoidance") {
							char.avoidance.value = char.avoidance.value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Hit") {
							char.hit.value = char.hit.value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Damage") {
							char.damage_resistance.value = char.damage_resistance.value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Cold") {
							char.cold_resistance.value = char.cold_resistance.value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Heat") {
							char.heat_resistance.value = char.heat_resistance.value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Magic") {
							char.magic_resistance.value = char.magic_resistance.value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Max Magic Dmg") {
							char.magic_dmg.max_value = char.magic_dmg.max_value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Min Magic Dmg") {
							char.magic_dmg.value = char.magic_dmg.value + (int)(target.item.item_benefit.getItemAt(k).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Wander") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Const Cost") {
							// TODO: Add in after create Player-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Inc Monster") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(k).text == "Dec Monster") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						
					}
					
				}
				else {
				
				
					target.pushItemFromSimilarStack(source);
					
					if (target.item.itemSlot == 14) {
						char.appearance_weapon = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
						char.damage_type.value = target.item.itemTitle;
					}
					if (target.item.itemSlot == 8)
						char.appearance_offhand = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 2)
						char.appearance_torso = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 3)
						char.appearance_legs = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 4)
						char.appearance_feet = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 6)
						char.appearance_shoulders = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 5)
						char.appearance_hands = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					if (target.item.itemSlot == 1)
						char.appearance_head = "assets/OotE/"+(String)(char.gender.value)+"/"+target.item.itemTitle+"0"+(String)(target.item.itemTier)+".png";
					for(var j:int=0; j<target.item.item_benefit.length;j++){
						if (target.item.item_benefit.getItemAt(j).text == "Min Phys Dmg") {
							char.phys_dmg.value = char.phys_dmg.value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Max Phys Dmg") {
							char.phys_dmg.max_value = char.phys_dmg.max_value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Fitness") {
							char.fitness.value = char.fitness.value + (int)(target.item.item_benefit.getItemAt(j).value);
							char.fitness.max_value = char.fitness.max_value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Mental") {
							char.mental_prowess.value = char.mental_prowess.value + (int)(target.item.item_benefit.getItemAt(j).value);
							char.mental_prowess.max_value = char.mental_prowess.max_value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						} 
						if (target.item.item_benefit.getItemAt(j).text == "Spirit") {
							char.spirituality.value = char.spirituality.value + (int)(target.item.item_benefit.getItemAt(j).value);
							char.spirituality.max_value = char.spirituality.max_value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue; 
						}
						if (target.item.item_benefit.getItemAt(j).text == "Eloquence") {
							char.eloquence.value = char.eloquence.value + (int)(target.item.item_benefit.getItemAt(j).value);
							char.eloquence.max_value = char.eloquence.max_value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Coordination") {
							char.coordination.value = char.coordination.value + (int)(target.item.item_benefit.getItemAt(j).value);
							char.coordination.max_value = char.coordination.max_value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Health") {
							char.health_current.value = char.health_current.value + (int)(target.item.item_benefit.getItemAt(j).value);
							char.health_max.value = char.health_max.value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Spirae") {
							char.spirae_current.value = char.spirae_current.value + (int)(target.item.item_benefit.getItemAt(j).value);
							char.spirae_max.value = char.spirae_max.value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Exp Bonus") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Gold Bonus") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Avoidance") {
							char.avoidance.value = char.avoidance.value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Hit") {
							char.hit.value = char.hit.value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Damage") {
							char.damage_resistance.value = char.damage_resistance.value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Cold") {
							char.cold_resistance.value = char.cold_resistance.value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Heat") {
							char.heat_resistance.value = char.heat_resistance.value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Magic") {
							char.magic_resistance.value = char.magic_resistance.value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Max Magic Dmg") {
							char.magic_dmg.max_value = char.magic_dmg.max_value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Min Magic Dmg") {
							char.magic_dmg.value = char.magic_dmg.value + (int)(target.item.item_benefit.getItemAt(j).value);
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Wander") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Const Cost") {
							// TODO: Add in after create Player-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Inc Monster") {
							// TODO: Add in after create Party-Stats
							continue;
						}
						if (target.item.item_benefit.getItemAt(j).text == "Dec Monster") {
							// TODO: Add in after create Party-Stats
							continue;
						}

					}
				}
			}
			
			private function acceptDrop(dragEvent:DragEvent):void{
				trace("accept Drop");
				var dropTarget:IUIComponent = dragEvent.currentTarget as IUIComponent;
				
				DragManager.acceptDragDrop(dropTarget);
			}
			
			private function handleDrop(dragEvent:DragEvent):void{

				var dragInitiator:IUIComponent = dragEvent.dragInitiator;
				var dropTarget:IUIComponent = dragEvent.currentTarget as IUIComponent;
				//handle dropping
				var same_category:Boolean = false;
				for(var i:int=0;i<char.current_items.maxSize;i++){  // Filters out if the item is the same 
					var itemS:ItemStack = ItemStack(char.current_items.list_itemStacks.getItemAt(i));					
					if (itemS.currSize>0 && itemS.item.itemID == ItemStackView(dragInitiator).itemStack.item.itemID){
						same_category =  true;
						break;
					}
				}
				if (same_category == false){
					
					// What slot does it go in?
					// Slot:  0 = None
					//        1 = Head
					//        2 = Torso
					//        3 = Legs
					//        4 = Feet
					//        5 = Hands
					//        6 = Shoulders
					//        7 = Cloak
					//        8 = Offhand
					//        9 = Ring
					//        10 = Neck
					//        11 = Belt
					//        12 = Attachment (Belt)
					//        13 = Trailing
					//        14 = Weapon					
					var temp:int = ItemStackView(dragInitiator).itemStack.item.itemSlot;
					if (temp == 0) return; // Unequipable item
					if (temp == 14) temp = 0; // Place weapons in the first slot.
					if (temp == 13) temp = 15; // Trailing adjustment
					if (temp == 12) temp = 13; // Belt attachment adjustment
					if (temp == 11) temp = 12; // Belt adjustment
					if (temp == 10) temp = 11; // Neck item adjustment
					
					var itemS2:ItemStack = ItemStack(char.current_items.list_itemStacks.getItemAt(temp));		
					var storage:ItemStack = new ItemStack(itemS2.maxSize);	
					var benefitStorage:ItemStack;
					var k:int;
					
					if ((itemS2.currSize > 0) && (temp == 9))   // Slot 1 of ring is full, shift to slot 2
						itemS2 = ItemStack(char.current_items.list_itemStacks.getItemAt(10));

					if ((itemS2.currSize > 0) && (temp == 13))   // Slot 1 of belt attachment is full, shift to slot 2
						itemS2 = ItemStack(char.current_items.list_itemStacks.getItemAt(14));

					if ((itemS2.currSize > 0) && (temp == 15))   // Slot 1 of trailing is full, shift to slot 2
						itemS2 = ItemStack(char.current_items.list_itemStacks.getItemAt(16));

					// Slot in use... swap item?
					// If dual slot, then this will always swap out on the second slot.
					if (itemS2.currSize > 0){

						
						// Switch the items
						storage.pushItemFromSimilarStack(itemS2);						
						itemS2.pushItemFromSimilarStack(ItemStackView(dragInitiator).itemStack);
						
						
						// Look for another slot if one exists, otherwise exit
						var tempItemStack:ItemStack;						
						tempItemStack = nextAvailableInventorySpot(char, storage);
						
						if (tempItemStack == null) { 
							ItemStackView(dragInitiator).itemStack.pushItemFromSimilarStack(itemS2);
							itemS2.pushItemFromSimilarStack(storage);													
							Alert.show("There are no inventory slots available to exchange items.");
							return;
						}
						
						tempItemStack.pushItemFromSimilarStack(storage);
						benefitStorage=tempItemStack;

						// Set the picture based on the type of item
						if (itemS2.item.itemSlot == 14) {
							char.appearance_weapon = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
							char.damage_type.value = itemS2.item.itemTitle;
						}
						if (itemS2.item.itemSlot == 8)
							char.appearance_offhand = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 2)
							char.appearance_torso = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 3)
							char.appearance_legs = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 4)
							char.appearance_feet = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 6)
							char.appearance_shoulders = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 5)
							char.appearance_hands = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 1)
							char.appearance_head = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";

						// Outgoing Item
						
						for(k=0; k<benefitStorage.item.item_benefit.length;k++){
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Min Phys Dmg") {
								char.phys_dmg.value = char.phys_dmg.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Max Phys Dmg") {
								char.phys_dmg.max_value = char.phys_dmg.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Fitness") {
								char.fitness.value = char.fitness.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								char.fitness.max_value = char.fitness.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Mental") {
								char.mental_prowess.value = char.mental_prowess.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								char.mental_prowess.max_value = char.mental_prowess.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							} 
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Spirit") {
								char.spirituality.value = char.spirituality.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								char.spirituality.max_value = char.spirituality.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue; 
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Eloquence") {
								char.eloquence.value = char.eloquence.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								char.eloquence.max_value = char.eloquence.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Coordination") {
								char.coordination.value = char.coordination.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								char.coordination.max_value = char.coordination.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Health") {
								char.health_current.value = char.health_current.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								char.health_max.value = char.health_max.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Spirae") {
								char.spirae_current.value = char.spirae_current.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								char.spirae_max.value = char.spirae_max.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Exp Bonus") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Gold Bonus") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Avoidance") {
								char.avoidance.value = char.avoidance.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Hit") {
								char.hit.value = char.hit.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Damage") {
								char.damage_resistance.value = char.damage_resistance.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Cold") {
								char.cold_resistance.value = char.cold_resistance.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Heat") {
								char.heat_resistance.value = char.heat_resistance.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Magic") {
								char.magic_resistance.value = char.magic_resistance.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Max Magic Dmg") {
								char.magic_dmg.max_value = char.magic_dmg.max_value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Min Magic Dmg") {
								char.magic_dmg.value = char.magic_dmg.value - (int)(benefitStorage.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Wander") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Const Cost") {
								// TODO: Add in after create Player-Stats
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Inc Monster") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (benefitStorage.item.item_benefit.getItemAt(k).text == "Dec Monster") {
								// TODO: Add in after create Party-Stats
								continue;
							} 
							
						}
						
						// Incoming Item
						for(k=0; k<itemS2.item.item_benefit.length;k++){
							if (itemS2.item.item_benefit.getItemAt(k).text == "Min Phys Dmg") {
								char.phys_dmg.value = char.phys_dmg.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Max Phys Dmg") {
								char.phys_dmg.max_value = char.phys_dmg.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Fitness") {
								char.fitness.value = char.fitness.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.fitness.max_value = char.fitness.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Mental") {
								char.mental_prowess.value = char.mental_prowess.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.mental_prowess.max_value = char.mental_prowess.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							} 
							if (itemS2.item.item_benefit.getItemAt(k).text == "Spirit") {
								char.spirituality.value = char.spirituality.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.spirituality.max_value = char.spirituality.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue; 
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Eloquence") {
								char.eloquence.value = char.eloquence.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.eloquence.max_value = char.eloquence.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Coordination") {
								char.coordination.value = char.coordination.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.coordination.max_value = char.coordination.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Health") {
								char.health_current.value = char.health_current.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.health_max.value = char.health_max.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Spirae") {
								char.spirae_current.value = char.spirae_current.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.spirae_max.value = char.spirae_max.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Exp Bonus") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Gold Bonus") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Avoidance") {
								char.avoidance.value = char.avoidance.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Hit") {
								char.hit.value = char.hit.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Damage") {
								char.damage_resistance.value = char.damage_resistance.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Cold") {
								char.cold_resistance.value = char.cold_resistance.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Heat") {
								char.heat_resistance.value = char.heat_resistance.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Magic") {
								char.magic_resistance.value = char.magic_resistance.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Max Magic Dmg") {
								char.magic_dmg.max_value = char.magic_dmg.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Min Magic Dmg") {
								char.magic_dmg.value = char.magic_dmg.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Wander") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Const Cost") {
								// TODO: Add in after create Player-Stats
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Inc Monster") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Dec Monster") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							
						}
						
					}
					else {
						itemS2.pushItemFromSimilarStack(ItemStackView(dragInitiator).itemStack);
						
						// Set the picture based on the type of item
						if (itemS2.item.itemSlot == 14) {
							char.appearance_weapon = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
							char.damage_type.value = itemS2.item.itemTitle;
						}
						if (itemS2.item.itemSlot == 8)
							char.appearance_offhand = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 2)
							char.appearance_torso = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 3)
							char.appearance_legs = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 4)
							char.appearance_feet = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 6)
							char.appearance_shoulders = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 5)
							char.appearance_hands = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						if (itemS2.item.itemSlot == 1)
							char.appearance_head = "assets/OotE/"+(String)(char.gender.value)+"/"+itemS2.item.itemTitle+"0"+(String)(itemS2.item.itemTier)+".png";
						
						for(k=0; k<itemS2.item.item_benefit.length;k++){
							if (itemS2.item.item_benefit.getItemAt(k).text == "Min Phys Dmg") {
								char.phys_dmg.value = char.phys_dmg.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Max Phys Dmg") {
								char.phys_dmg.max_value = char.phys_dmg.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Fitness") {
								char.fitness.value = char.fitness.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.fitness.max_value = char.fitness.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Mental") {
								char.mental_prowess.value = char.mental_prowess.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.mental_prowess.max_value = char.mental_prowess.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							} 
							if (itemS2.item.item_benefit.getItemAt(k).text == "Spirit") {
								char.spirituality.value = char.spirituality.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.spirituality.max_value = char.spirituality.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue; 
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Eloquence") {
								char.eloquence.value = char.eloquence.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.eloquence.max_value = char.eloquence.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Coordination") {
								char.coordination.value = char.coordination.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.coordination.max_value = char.coordination.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Health") {
								char.health_current.value = char.health_current.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.health_max.value = char.health_max.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Spirae") {
								char.spirae_current.value = char.spirae_current.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								char.spirae_max.value = char.spirae_max.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Exp Bonus") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Gold Bonus") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Avoidance") {
								char.avoidance.value = char.avoidance.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Hit") {
								char.hit.value = char.hit.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Damage") {
								char.damage_resistance.value = char.damage_resistance.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Cold") {
								char.cold_resistance.value = char.cold_resistance.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Heat") {
								char.heat_resistance.value = char.heat_resistance.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Magic") {
								char.magic_resistance.value = char.magic_resistance.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Max Magic Dmg") {
								char.magic_dmg.max_value = char.magic_dmg.max_value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Min Magic Dmg") {
								char.magic_dmg.value = char.magic_dmg.value + (int)(itemS2.item.item_benefit.getItemAt(k).value);
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Wander") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Const Cost") {
								// TODO: Add in after create Player-Stats
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Inc Monster") {
								// TODO: Add in after create Party-Stats
								continue;
							}
							if (itemS2.item.item_benefit.getItemAt(k).text == "Dec Monster") {
								// TODO: Add in after create Party-Stats
								continue;
							}
								
						}
							
					} 
				} 
			}
			
		]]>
	</fx:Script>
	
	<views:AttributeView 	char="{char}"
							  height="100%"
							  width="180"/>
	
	<s:BitmapImage id="invdev1" width="5" height="611" 
				   source="assets/InventoryDivider.png"
				   />	

	<s:Group id="character_appearance_container"
			 width="100%" height="100%">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		<s:BitmapImage id="character_top" x="0" width="510" height="170" 
					   source="assets/HUD/Inventory/Top.png"
					   />	
		<s:BitmapImage id="character_left" x="0" y="170" width="100" height="340" 
					   source="assets/HUD/Inventory/Side.png"
					   />	
		<s:BitmapImage id="character_right" x="410" y="170" width="100" height="340" 
					   source="assets/HUD/Inventory/Side.png"
					   />	
		<s:BitmapImage id="character_bottom" x="0" y="510" width="510" height="101" 
					   source="assets/HUD/Inventory/Bottom.png"
					   />	
		<s:BitmapImage id="character_appearance" x="100" y="170" width="310" height="340" 
					   source="{char.appearance_basebody}"
					   />	
		<s:BitmapImage id="character_appearance2" x="100" y="170" width="310" height="340"
					   source="{char.appearance_basehead}"
					   />	
		<s:BitmapImage id="character_appearance3" x="100" y="170" width="310" height="340"
					   source="{char.appearance_torso}"
					   />	
		<s:BitmapImage id="character_appearance4" x="100" y="170" width="310" height="340"
					   source="{char.appearance_head}"
					   />	
		<s:BitmapImage id="character_appearance5" x="100" y="170" width="310" height="340"
					   source="{char.appearance_legs}"
					   />	
		<s:BitmapImage id="character_appearance6" x="100" y="170" width="310" height="340"
					   source="{char.appearance_feet}"
					   />	
		<s:BitmapImage id="character_appearance7" x="100" y="170" width="310" height="340"
					   source="{char.appearance_shoulders}"
					   />	
		<s:BitmapImage id="character_appearance8" x="100" y="170" width="310" height="340"
					   source="{char.appearance_hands}"
					   />	
		<s:BitmapImage id="character_appearance9" x="100" y="170" width="310" height="340"
					   source="{char.appearance_weapon}"
					   />	
		<s:BitmapImage id="character_appearance10" x="100" y="170" width="310" height="340"
					   source="{char.appearance_offhand}"
					   />
		
		<views:CurrentItemListView id="current_list_view1" current_items="{char.current_items}"
								   start_index="0"/>
			
		<s:BitmapImage id="invdev2" x="510" y="0" width="5" height="611" 
					   source="assets/InventoryDivider.png"
					   />	
	</s:Group>

	<views:InventoryView char="{char}" inventory="{char.inventory}"/>
	
</s:TitleWindow>
