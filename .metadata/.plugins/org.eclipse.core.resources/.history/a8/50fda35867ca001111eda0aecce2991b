<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="125"  height="644"
			   x="0" y="60"
			   creationComplete="creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import character.Character;
			
			import hud.HudAttribute;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.DragEvent;
			import mx.managers.PopUpManager;
			
			import pkgParty.CharacterDblClickedEvent;
			import pkgParty.CharacterSelectedEvent;
			import pkgParty.Party;
			import pkgParty.ViewEachCharInParty;
			
			import spark.components.Label;
			import spark.filters.GlowFilter;
			
			import views.CharacterView;
			import pkgInventory.ItemStack;
			import pkgInventory.ItemStackView;

			import events.DragDropEvent;
			
			[Bindable]
			public var aParty: Party;
			
			[Bindable]
			public var character_view:CharacterView;

			private function handleCloseEvent():void{
				visible =false;
			}
			
			private function updateSelectedView(oldIndex:int, newIndex:int):void{
				
				if (oldIndex == newIndex) return; // Don't do anything if you click on the same item again
				aParty.setCurrCharIndex(newIndex);
				var newSelectedElement:ViewEachCharInParty = this.getElementAt(newIndex) as ViewEachCharInParty;
							
				
				var filter : GlowFilter = new GlowFilter();
				filter.blurX = 10;
				filter.blurY = 10;
				filter.quality = 2;
				filter.alpha = 0.8;
				filter.color = 0xFFD520;
				filter.inner = false;
				
				newSelectedElement.filters= [filter];
				
				if(oldIndex != -1){
					var oldSelectedElement:ViewEachCharInParty = this.getElementAt(oldIndex) as ViewEachCharInParty;
					oldSelectedElement.filters= [];
				}

				
			}
			
			public function handleCharacterSelected(event:CharacterSelectedEvent):void {
				this.aParty.setCurrChar(event.char);
				if (this.character_view != null) {
					this.character_view.inv_view.char = event.char;
					this.character_view.inv_view.inventory = event.char.inventory;
					(TyrantsRealm)(this.parentApplication).hud_attribute.character_view.inv_view.char = event.char;
					(TyrantsRealm)(this.parentApplication).hud_attribute.character_view.inv_view.inventory = event.char.inventory;
					character_view.char = aParty.getCurrChar();
				}
				
				var old_index:int= aParty.getCurrCharIndex();
			
				updateSelectedView(old_index,event.indexCharInParty);
				
				// Update Tooltips
				if (character_view != null && character_view.visible == true && character_view.inv_view != null) {
					character_view.current_list_view1.updateEquippedItemTooltips();
					character_view.inv_view.updateTooltips();
				}
				if ((TyrantsRealm)(this.parentApplication).hud_attribute.character_view != null && 
					(TyrantsRealm)(this.parentApplication).hud_attribute.character_view.inv_view != null) {
					(TyrantsRealm)(this.parentApplication).hud_attribute.character_view.inv_view.updateTooltips();
				}
			}
			
			public function handleCharacterDblClicked(event:CharacterDblClickedEvent):void {
				if (character_view == null){							
					character_view= PopUpManager.createPopUp(this, CharacterView,false) as CharacterView;
					character_view.char = aParty.getCurrChar();	
					(TyrantsRealm)(this.parentApplication).hud_attribute.character_view = this.character_view;
					
					// Update Tooltips
					character_view.current_list_view1.updateEquippedItemTooltips();
					
				}
				else{					
					if (character_view.visible == false){
						character_view.char = aParty.getCurrChar();	
						
						// Update Tooltips
						character_view.current_list_view1.updateEquippedItemTooltips();
						
						character_view.visible = true;
						character_view.inv_view.updateTooltips();
					}
					else{
						character_view.char = aParty.getCurrChar();	
						character_view.visible = false;
					}
				}
				
			}
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if (aParty == null) return;
				var currPop:int = aParty.getCurrPopulation();
				var i:int;
				
				// Change Selected NPC
				addEventListener("CharacterIsSelected",handleCharacterSelected);		

				// Open Character View which includes Attributes, Current Equipped Items and Inventory panels.
				addEventListener("CharacterIsDblClicked",handleCharacterDblClicked);		
							

				for(i=0; i<currPop; i++){
					var viewAChar:ViewEachCharInParty = new ViewEachCharInParty();
					viewAChar.char = aParty.getCharAt(i);
					viewAChar.bmpImg.height="70";
					viewAChar.bmpImg.width="70";
					viewAChar.updateStatusBar();
										
					viewAChar.index_in_partyview = i;
				
					this.addElement(viewAChar);
				}
				
				updateSelectedView(-1,0);
				
			}
			
		]]>
	</fx:Script>
	
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center"
						  gap="20"/>
	</s:layout>
	
	
	
</s:Group>
