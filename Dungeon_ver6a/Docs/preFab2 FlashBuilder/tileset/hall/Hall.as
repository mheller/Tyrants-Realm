//AS3ExporterAIR version 2.3, code Flash 10, generated by Prefab3D: http://www.closier.nl/prefab
package tileset.hall
{
	import away3d.containers.ObjectContainer3D;
	import away3d.containers.Scene3D;
	import away3d.materials.*;
	import away3d.core.base.*;
	import away3d.loaders.utils.*;
	import away3d.loaders.data.*;
	import flash.utils.Dictionary;
	import away3d.primitives.*;
	import flash.display.Bitmap;
	import flash.display.BitmapData;

	import flash.geom.*;

	public class Hall extends Mesh
	{
		[Embed(source="images/aw_0.jpg")]
		private var Aw_0_Bitmap_Bitmap:Class;

		private var objs:Object = {};
		private var geos:Array = [];
		private var oList:Array =[];
		private var aC:Array;
		private var aV:Array;
		private var aU:Array;
		private var _scale:Number;

		public function Hall(scale:Number = 1)
		{
			_scale = scale;
			setSource();
			addContainers();
			buildMeshes();
			buildMaterials();
			cleanUp();
		}

		private function buildMeshes():void
		{
			var m0:Matrix3D = new Matrix3D();
			m0.rawData = Vector.<Number>([1,0,0,0,0,1,0,0,0,0,1,0,0*_scale,0*_scale,0*_scale,1]);
			transform = m0;

			objs.obj0 = {name:"aw_0",  transform:m0, pivotPoint:new Vector3D(0,0,0), container:-1, bothsides:false, material:null, ownCanvas:false, pushfront:false, pushback:false};
			objs.obj0.geo=geos[0];

			var ref:Object;
			
			var j:int;
			var av:Array;
			var au:Array;
			var v0:Vertex;
			var v1:Vertex;
			var v2:Vertex;
			var u0:UV;
			var u1:UV;
			var u2:UV;
			var aRef:Vector.<Face>;
			for(var i:int = 0;i<1;++i){
				ref = objs["obj"+i];
				if(ref != null){
					this.type = ".as";
					this.bothsides = ref.bothsides;
					this.name = ref.name;
					this.pushfront = ref.pushfront;
					this.pushback = ref.pushback;
					this.ownCanvas = ref.ownCanvas;

					oList.push(this);
					this.transform = ref.transform;
					this.movePivot(ref.pivotPoint.x, ref.pivotPoint.y, ref.pivotPoint.z);
					if (ref.geo.geometry != null) {
						this.geometry = ref.geo.geometry;
						continue;
					}
					ref.geo.geometry = new Geometry();
					this.geometry = ref.geo.geometry;
					aRef = ref.geo.f;
					for(j = 0;j<aRef.length;++j){
						Face(aRef[j]).material = ref.material;
						ref.geo.geometry.addFace( Face(aRef[j]));
					}

				}
			}
		}

		private function setSource():void
		{
			var geo0vert:String ="1f4/190/1f4,190/190/0,1.dc6d3d4cc9339e-e/190/fe.0474dec26804,1f4/-1f4/-64,1f4/-1f4/1f4,-1f4/-1f4/1f4,-1f4/-1f4/0,190/-c8/0,-190/-63.5af3107a3ffd/64,-190/-12c/0,-1f4/-63.5af3107a3ffd/1f4,190/0/c8,-190/12c.00000000000006/64,-1f4/190/1f4,-1f4/190/-1f4,-190/63.5af3107a3ffd/-c8,-1f4/-1f4/-1f4,1f4/-1f4/-1f4,1f4/-63.5af3107a3ffd/-1f4,190/-63.5af3107a3ffd/-c8,1f4/190/-1f4,1f4/12c.00000000000006/-12c,1.dc6d3d4cc9339e-e/1f4/-c8,1f4/-63.5af3107a3ffd/1f4,-1f4/-63.5af3107a3ffd/-1f4";
			var geo0uvs:String ="0.0becd/0.010fd,0.015120/0.2cc5f,0.3281f/0.1c7da,0.59c87/0.3dd2,0.59c87/0.514f2,0.a0e6d/0.514f1,0.a0e6d/0.4933,0.478e/0.5dbe4,0.2cc44/0.72942,0.4e1c9/0.5dbe4,0.259de/0.7a469,0.2c92d/0.6c8ba,0.0b098/0.5dbe4,0.0b098/0.78a8e,0.3a0bd/0.cc9a,0.2cd75/0.9ad27,0.4e1c9/0.9b28e,0.25a8b/0.f0b8,0.0b098/0.9a7c6,0.4e1c9/0.9b28e,0.3a9ae/0.87edd,0.a0e6d/0.0a30b,0.59c87/0.0a30b,0.0b098/0.5dbe4,0.0b098/0.78a8e,0.1f785/0.7931e,0.0b098/0.9a7c6,0.017423/0.94800,0.532bb/0.517bc,0.300f9/0.3cd0e,0.0ad1b/0.417ed,0.0bece/0.517bc,0.4f2df/0.28e49,0.4e1c9/0.79449,0.4e1c9/0.79449,0.478e/0.5dbe4,0.4e1c9/0.5dbe4,0.532bb/0.0b2c2";
			var geo0faces:String ="0,1,2,0,1,2,3,4,5,3,4,5,6,3,5,6,3,5,3,7,4,7,8,9,8,9,5,a,b,c,a,8,5,d,a,c,b,1,0,e,f,10,c,8,a,11,a,d,d,c,a,12,11,d,e,f,8,13,14,a,c,e,8,11,13,a,9,8,f,b,a,14,3,6,10,3,6,15,11,3,10,16,3,15,11,12,13,17,18,19,14,15,13,1a,1b,19,12,14,13,18,1a,19,e,16,15,1c,1d,1e,14,e,15,1f,1c,1e,16,e,c,1d,1c,20,16,2,1,1d,2,1,15,16,1,1e,1d,1,15,1,b,1b,f,e,13,15,b,19,1b,e,7,13,b,8,19,e,17,4,7,21,9,8,b,17,7,e,21,8,b,0,17,e,10,21,13,7,3,19,8,7,11,13,3,17,19,7,f,e,18,14,13,22,6,18,10,23,22,24,5,9,6,c,b,23,f,18,6,14,22,23,9,f,6,b,14,23,0,2,d,0,2,25,16,c,d,1d,20,25,2,16,d,2,1d,25";
			var geo0:FacesDefinition = new FacesDefinition();
			geo0.f = buildFaces( geo0faces.split(","),  buildVertices(read(geo0vert).split(",")), buildUVs(read(geo0uvs).split(",")) );
			geos.push(geo0);
		}

		private function buildFaces(aFaces:Array, vVerts:Vector.<Vertex>, vUVs:Vector.<UV>):Vector.<Face>
		{
			var vFaces:Vector.<Face> = new Vector.<Face>();
			var f:Face;
			for(var i:int = 0;i<aFaces.length;i+=6){
				f = new Face( vVerts[parseInt(aFaces[i], 16)],
									vVerts[parseInt(aFaces[i+1], 16)],
									vVerts[parseInt(aFaces[i+2], 16)],
									null,
									vUVs[parseInt(aFaces[i+3], 16)],
									vUVs[parseInt(aFaces[i+4], 16)],
									vUVs[parseInt(aFaces[i+5], 16)]);
				vFaces.push(f);
			}

			return vFaces;
		}

		private function buildVertices(aVerts:Array):Vector.<Vertex>
		{
			var tmpv:Array;
			var vVerts:Vector.<Vertex> = new Vector.<Vertex>();
			for(var i:int = 0;i<aVerts.length;i++){
				tmpv = aVerts[i].split("/");
				vVerts[i] = new Vertex( parseFloat(tmpv[0])*_scale, parseFloat(tmpv[1])*_scale, parseFloat(tmpv[2])*_scale  );
			}
			return vVerts;
		}

		private function buildUVs(aUvs:Array):Vector.<UV>
		{
			var tmpv:Array;
			var vUVs:Vector.<UV> = new Vector.<UV>();
			for(var i:int = 0;i<aUvs.length;++i){
				tmpv = aUvs[i].split("/");
				vUVs[i] = new UV(parseFloat(tmpv[0]), parseFloat(tmpv[1]));
			}

			return vUVs;
		}


		private function buildMaterials():void
		{
				var aw_0_Bitmap:Bitmap = new Aw_0_Bitmap_Bitmap();
				applyMaterialToMesh("aw_0", aw_0_Bitmap.bitmapData);

		}

		private function applyMaterialToMesh(id:String, bmd:BitmapData):void
		{
			for(var i:int;i<meshes.length;++i){
				if(meshes[i].name == id){
					if(!bmd){
						trace("Embed of "+id+" failed! Check source path or if CS4 call 911!");
					} else {
					meshes[i].material = new BitmapMaterial(bmd);
					}
					break;
				}
			}
		}

		private function cleanUp():void
		{
			for(var i:int = 0;i<1;++i){
				objs["obj"+i] == null;
			}
			aV = null;
			aU = null;
		}

		private function addContainers():void
		{}


		public function get meshes():Array
		{
			return oList;
		}


		private function read(str:String):String
		{
			var start:int= 0;
			var chunk:String;
			var end:int= 0;
			var dec:String = "";
			var charcount:int = str.length;
			for(var i:int = 0;i<charcount;++i){
				if (str.charCodeAt(i)>=44 && str.charCodeAt(i)<= 48 ){
					dec+= str.substring(i, i+1);
				}else{
					start = i;
					chunk = "";
					while(str.charCodeAt(i)!=44 && str.charCodeAt(i)!= 45 && str.charCodeAt(i)!= 46 && str.charCodeAt(i)!= 47 && i<=charcount){
						i++;
					}
					chunk = ""+parseInt("0x"+str.substring(start, i), 16 );
					dec+= chunk;
					i--;
				}
			}
			return dec;
		}

	}
}
class FacesDefinition
{
	import away3d.core.base.Face;
	import away3d.core.base.Geometry;
	public var f:Vector.<Face>;
	public var geometry:Geometry;
}