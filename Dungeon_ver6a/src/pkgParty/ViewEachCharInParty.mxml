<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100" height="100"
		 click="group1_clickHandler(event)" 
		 doubleClickEnabled="true" 
		 doubleClick="dbl_clickHandler(event)"
		 creationComplete="creationCompleteHandler(event)"
		 >
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="CharacterIsSelected", type="flash.events.Event")]
		[Event(name="CharacterIsDblClicked", type="flash.events.Event")]
	</fx:Metadata>

	
	<fx:Script>
		<![CDATA[
			import character.Character;
			
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			
			import spark.filters.BevelFilter;
			import spark.primitives.Ellipse;
			import spark.core.MaskType;
			import spark.primitives.BitmapImage;
			import spark.primitives.Rect;
			import spark.primitives.supportClasses.FilledElement;

			[Bindable]
			public var char:Character;
			
			public var index_in_partyview:int;
			public var isSelected:Boolean = false;
			
			protected function group1_clickHandler(event:MouseEvent):void
			{
				// A bit of a hack due to the event triggering on the background. TODO: make dynamic if any resizing is done
				// Make sure its not on the background
				if ((event.stageX < 20) || ((event.stageX > 90) && (event.stageX < 120)) || (event.stageX > 190)) return;
				
				if (((event.stageY > 130) && (event.stageY < 165)) || ((event.stageY > 235) && (event.stageY < 270)) ||
					((event.stageY > 340) && (event.stageY < 375)) || ((event.stageY > 445) && (event.stageY < 480)) ||
					(event.stageY > 550) || (event.stageY < 60)) return;
				
				// Make sure its not on one of the empty party slots
				if ( ((TyrantsRealm)(this.parentApplication).party1.getCurrPopulation() < 10) && 
					 (event.stageX >= 120) && (event.stageX <=190) && (event.stageY >= 480) && (event.stageY <= 550)) return;  
				if ( ((TyrantsRealm)(this.parentApplication).party1.getCurrPopulation() < 9) && 
					(event.stageX >= 120) && (event.stageX <=190) && (event.stageY >= 375) && (event.stageY <= 445)) return;  
				if ( ((TyrantsRealm)(this.parentApplication).party1.getCurrPopulation() < 8) && 
					(event.stageX >= 120) && (event.stageX <=190) && (event.stageY >= 270) && (event.stageY <= 340)) return;  
				if ( ((TyrantsRealm)(this.parentApplication).party1.getCurrPopulation() < 7) && 
					(event.stageX >= 120) && (event.stageX <=190) && (event.stageY >= 165) && (event.stageY <= 235)) return;  
				if ( ((TyrantsRealm)(this.parentApplication).party1.getCurrPopulation() < 6) && 
					(event.stageX >= 120) && (event.stageX <=190) && (event.stageY >= 60) && (event.stageY <= 130)) return;  
				if ( ((TyrantsRealm)(this.parentApplication).party1.getCurrPopulation() < 5) && 
					(event.stageX >= 20) && (event.stageX <=90) && (event.stageY >= 480) && (event.stageY <= 550)) return;  
				if ( ((TyrantsRealm)(this.parentApplication).party1.getCurrPopulation() < 4) && 
					(event.stageX >= 20) && (event.stageX <=90) && (event.stageY >= 375) && (event.stageY <= 445)) return;  
				if ( ((TyrantsRealm)(this.parentApplication).party1.getCurrPopulation() < 3) && 
					(event.stageX >= 20) && (event.stageX <=90) && (event.stageY >= 270) && (event.stageY <= 340)) return;  
				if ( ((TyrantsRealm)(this.parentApplication).party1.getCurrPopulation() < 2) && 
					(event.stageX >= 20) && (event.stageX <=90) && (event.stageY >= 165) && (event.stageY <= 235)) return;  
				
				//var eventObject:Event = new Event("CharacterIsSelected",true);
				var eventObject:CharacterSelectedEvent = new CharacterSelectedEvent("CharacterIsSelected",true,false,this.char,this.index_in_partyview);				
				
				this.dispatchEvent(eventObject);
			}

			protected function dbl_clickHandler(event:MouseEvent):void
			{
				//var eventObject:Event = new Event("CharacterIsSelected",true);
				var eventObject:CharacterDblClickedEvent = new CharacterDblClickedEvent("CharacterIsDblClicked",true,false,this.char,this.index_in_partyview);				
				
				this.dispatchEvent(eventObject);
			}

			public function updateStatusBar():void{
				var tmpHealth:int;
				tmpHealth = ((char.health_max.getValue() as int)*40)/(char.health_max.getValue());
				this.healthStatusBar.setProgress(tmpHealth,40);
				
				var tmpSpirae:int;
				tmpSpirae = ((char.spirae_max.getValue() as int)*40)/(char.spirae_max.getValue());
				this.spiraeStatusBar.setProgress(tmpSpirae,40);
				
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				// Manage dropping items from Inventory or Equipped to Character portraits to transfer them.
				addEventListener(DragEvent.DRAG_ENTER, (TyrantsRealm)(this.parentApplication).hud_attribute.character_view.acceptDrop);
				addEventListener(DragEvent.DRAG_DROP, (TyrantsRealm)(this.parentApplication).hud_attribute.character_view.xferItem);
			}
			
			
			
		]]>
	</fx:Script>
	
	<s:layout>
<!--		<s:VerticalLayout horizontalAlign="center"
						  gap="2"/> -->
		<s:BasicLayout/>
	</s:layout>

	<s:Group id="character_appearance_container"
			 width="100%" height="100%" y="0">

		<s:mask>			
			<s:Graphic id="mask" maskType="{MaskType.ALPHA}" cacheAsBitmap="true" > 
				<s:Ellipse y="0" x="20" width="70" height="70"> 
					<s:fill> 
						<s:SolidColor color="0xDDAAAA" /> 
					</s:fill> 
				</s:Ellipse> 
			</s:Graphic> 
		</s:mask>
		
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
	    <s:BitmapImage id="bmpImg" source="{char.appearance_basebody}" 
					   width="350" height="350" 					
				   	   horizontalAlign="center" maskType="clip">
		</s:BitmapImage>
		<s:BitmapImage id="basehead" source="{char.appearance_basehead}" 
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_torso" source="{char.appearance_torso}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_head" source="{char.appearance_head}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_legs" source="{char.appearance_legs}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_feet" source="{char.appearance_feet}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_shoulders" source="{char.appearance_shoulders}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_hands" source="{char.appearance_hands}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	
		<s:BitmapImage id="char_weapon" source="{char.appearance_weapon}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>
		<s:BitmapImage id="char_offhand" source="{char.appearance_offhand}"
					   width="{bmpImg.width}" height="{bmpImg.height}"
					   horizontalAlign="center"/>	

	</s:Group>

	<s:HGroup id="health_group" y="72" x="22">
		<s:Label text="H" fontSize="8"/>
		<mx:ProgressBar id="healthStatusBar"
						mode="manual"
						minimum="0"
						maximum="100" 
						label=""
						width="50"
						height="8"/>
	</s:HGroup>

	<s:HGroup id="spirae_group" y="80" x="23">
		<s:Label text="S" fontSize="8"/>
		<mx:ProgressBar id="spiraeStatusBar"
						mode="manual"
						minimum="0"
						maximum="100" 
						label=""
						width="50"
						height="8"/>
	</s:HGroup>

</s:Group>


