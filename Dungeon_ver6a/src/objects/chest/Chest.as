//AS3ExporterAIR version 2.3, code Flash 10, generated by Prefab3D: http://www.closier.nl/prefab
package objects.chest
{
	import away3d.containers.ObjectContainer3D;
	import away3d.containers.Scene3D;
	import away3d.materials.*;
	import away3d.core.base.*;
	import away3d.loaders.utils.*;
	import away3d.loaders.data.*;
	import flash.utils.Dictionary;
	import away3d.primitives.*;
	import flash.display.Bitmap;
	import flash.display.BitmapData;

	import flash.geom.*;

	public class Chest extends Mesh
	{
		[Embed(source="images/aw_0.jpg")]
		private var Aw_0_Bitmap_Bitmap:Class;

		private var objs:Object = {};
		private var geos:Array = [];
		private var oList:Array =[];
		private var aC:Array;
		private var aV:Array;
		private var aU:Array;
		private var _scale:Number;

		public function Chest(scale:Number = 1)
		{
			_scale = scale;
			setSource();
			addContainers();
			buildMeshes();
			buildMaterials();
			cleanUp();
		}

		private function buildMeshes():void
		{
			var m0:Matrix3D = new Matrix3D();
			m0.rawData = Vector.<Number>([1,0,0,0,0,1,0,0,0,0,1,0,0*_scale,147.6986*_scale,-4.801200000000005*_scale,1]);
			transform = m0;

			objs.obj0 = {name:"aw_0",  transform:m0, pivotPoint:new Vector3D(0,0,0), container:-1, bothsides:false, material:null, ownCanvas:false, pushfront:false, pushback:false};
			objs.obj0.geo=geos[0];

			var ref:Object;
			
			var j:int;
			var av:Array;
			var au:Array;
			var v0:Vertex;
			var v1:Vertex;
			var v2:Vertex;
			var u0:UV;
			var u1:UV;
			var u2:UV;
			var aRef:Vector.<Face>;
			for(var i:int = 0;i<1;++i){
				ref = objs["obj"+i];
				if(ref != null){
					this.type = ".as";
					this.bothsides = ref.bothsides;
					this.name = ref.name;
					this.pushfront = ref.pushfront;
					this.pushback = ref.pushback;
					this.ownCanvas = ref.ownCanvas;

					oList.push(this);
					this.transform = ref.transform;
					this.movePivot(ref.pivotPoint.x, ref.pivotPoint.y, ref.pivotPoint.z);
					if (ref.geo.geometry != null) {
						this.geometry = ref.geo.geometry;
						continue;
					}
					ref.geo.geometry = new Geometry();
					this.geometry = ref.geo.geometry;
					aRef = ref.geo.f;
					for(j = 0;j<aRef.length;++j){
						Face(aRef[j]).material = ref.material;
						ref.geo.geometry.addFace( Face(aRef[j]));
					}

				}
			}
		}

		private function setSource():void
		{
			var geo0vert:String ="-a7.75c/-76.05625b7f3fff/-6a.24f8,a7.75c/-76.05625b7f3fff/-6a.24f8,a7.75c/16.25a15e2d76006/-6a.24f8,-a7.75c/16.25a15e2d76006/-6a.24f8,-c6.31b685e227fe/40.416dd6252801/7f.2260ff928fff,c6.31b685e227fe/40.416dd6252801/7f.2260ff928fff,c6.31b685e227fe/-93.1b4a/7f.2260ff928fff,-c6.31b685e227fe/-93.1b4a/7f.2260ff928fff,c6.31b685e227fe/-93.1b4a/-75.1e4c,-c6.31b685e227fe/-93.1b4a/-75.1e4c,-bd.281284a61802/-75.3f898c7be7fe/61.2260ff929001,-bd.281284a61802/-75.3f898c7be7fe/-57.1e4c,-bd.281284a61802/16.1121f27ef7005/-57.1e4c,-bd.281284a61802/16.1121f27ef7005/61.2260ff929001,bd.281284a61802/-75.3f898c7be7fe/-57.1e4c,bd.281284a61802/-75.3f898c7be7fe/61.2260ff929001,bd.281284a61802/16.1121f27ef7005/61.2260ff929001,bd.281284a61802/16.1121f27ef7005/-57.1e4c,a7.75c/-76.05625b7f3fff/-75.1e4c,-a7.75c/-76.05625b7f3fff/-75.1e4c,-c6.31b685e227fe/40.416dd6252801/-75.1e4c,-a7.75c/16.25a15e2d76006/-75.1e4c,c6.31b685e227fe/40.416dd6252801/-75.1e4c,a7.75c/16.25a15e2d76006/-75.1e4c,-c6.31b685e227fe/-75.3f898c7be7fe/-57.1e4c,-c6.31b685e227fe/-75.3f898c7be7fe/61.2260ff929001,-c6.31b685e227fe/16.1121f27ef7005/61.2260ff929001,-c6.31b685e227fe/16.1121f27ef7005/-57.1e4c,c6.31b685e227fe/-75.3f898c7be7fe/61.2260ff929001,c6.31b685e227fe/-75.3f898c7be7fe/-57.1e4c,c6.31b685e227fe/16.1121f27ef7005/-57.1e4c,c6.31b685e227fe/16.1121f27ef7005/61.2260ff929001,-a0.03db33b1a001/87.02d2/-1d.201dd504c4ffe,a0.03db33b1a001/87.02d2/-1d.201dd504c4ffe,a0.03db33b1a001/87.02d2/27.f3995c0e801,-a0.03db33b1a001/87.02d2/27.f3995c0e801,-a0.03db33b1a001/40.4256aaca3803/-69.29746bb57801,a0.03db33b1a001/40.4256aaca3803/-69.29746bb57801,a0.03db33b1a001/67.269dfd379803/-53.364,-a0.03db33b1a001/67.269dfd379803/-53.364,-c6.31b685e227fe/70.9ee/-5d.21b2,-c6.31b685e227fe/70.9ee/67.1d1,a0.03db33b1a001/40.4256aaca3803/73.0246,-a0.03db33b1a001/40.4256aaca3803/73.0246,-a0.03db33b1a001/67.269dfd379803/5d.2ac85a7d8001,a0.03db33b1a001/67.269dfd379803/5d.2ac85a7d8001,c6.31b685e227fe/70.9ee/67.1d1,c6.31b685e227fe/70.9ee/-5d.21b2,c6.31b685e227fe/93.1b4a/2a.c56,c6.31b685e227fe/93.1b4a/-20.40e2235bb7ff,-c6.31b685e227fe/93.1b4a/-20.40e2235bb7ff,-c6.31b685e227fe/93.1b4a/2a.c56,-a0.03db33b1a001/93.1b4a/-20.40e2235bb7ff,-a0.03db33b1a001/93.1b4a/2a.c56,a0.03db33b1a001/93.1b4a/2a.c56,a0.03db33b1a001/93.1b4a/-20.40e2235bb7ff,-a0.03db33b1a001/40.416dd6252801/-75.1e4c,-a0.03db33b1a001/70.9ee/-5d.21b2,a0.03db33b1a001/70.9ee/-5d.21b2,a0.03db33b1a001/40.416dd6252801/-75.1e4c,a0.03db33b1a001/40.416dd6252801/7f.2260ff928fff,a0.03db33b1a001/70.9ee/67.1d1,-a0.03db33b1a001/70.9ee/67.1d1,-a0.03db33b1a001/40.416dd6252801/7f.2260ff928fff,c6.31b685e227fe/40.4256aaca3803/-69.29746bb57801,-c6.31b685e227fe/40.4256aaca3803/-69.29746bb57801,-c6.31b685e227fe/40.4256aaca3803/73.0246,c6.31b685e227fe/40.4256aaca3803/73.0246,-1c.1c28/a.30829abd9f00d/-7f.2260ff928fff,1c.1c28/a.30829abd9f00d/-7f.2260ff928fff,13.3dd/23.4e8/-7f.2260ff928fff,-13.3dd/23.4e8/-7f.2260ff928fff,-10.86a/4a.58e035e32ffe/-7f.2260ff928fff,10.86a/4a.58e035e32ffe/-7f.2260ff928fff,14.5dad8e696ffe/52.19f2/-5a.1ca8,-14.5dad8e696ffe/52.19f2/-5a.1ca8,-23.17b0/3.5eb37da3220c2/-5a.1ca8,23.17b0/3.5eb37da3220c2/-5a.1ca8,-18.2c67f4c7fa002/21.177707d5d001/-5a.1ca8,18.2c67f4c7fa002/21.177707d5d001/-5a.1ca8,-1c.1c28/34.854/-7f.2260ff928fff,-23.17b0/36.1148/-5a.1ca8,1c.1c28/34.854/-7f.2260ff928fff,23.17b0/36.1148/-5a.1ca8";
			var geo0uvs:String ="0.770ae/0.923eb,0.2895/0.e9fe,0.195d3/0.b9ab5,0.770ae/0.b9ab5,0.7c700/0.04fe0,0.0d303/0.04fe0,0.0d303/0.4080c,0.7c700/0.4080c,0.0d303/0.852f5,0.7c700/0.852f5,0.8d6b7/0.57fa6,0.8d6b7/0.8bd9b,0.12107/0.8bd9b,0.b4a45/0.57fa6,0.b7fd6/0.58187,0.b7fd6/0.8bf7d,0.df365/0.8bf7d,0.df365/0.58187,0.015f93/0.8d7d2,0.73a6f/0.8d7d2,0.846ce/0.c451f,0.846cf/0.88cf3,0.c5d3/0.911cf,0.c5d3/0.b8899,0.0fa30/0.14296,0.7ee2c/0.c99db,0.7619b/0.bdd55,0.186c0/0.bdd56,0.0c43d/0.89cae,0.0c43d/0.c54da,0.0150ce/0.b9854,0.0150ce/0.e9c1,0.015f93/0.9085d,0.73a6f/0.9085c,0.789b3/0.911cf,0.789b4/0.b8899,0.bcf6/0.baccb,0.186c0/0.baccb,0.018158/0.b9854,0.02689/0.e9c1,0.84d7a/0.13f7,0.84d7a/0.74a7,0.84d7a/0.38192,0.84d7a/0.010e04,0.946d3/0.9ce74,0.d91bd/0.9ce68,0.d0b41/0.e807,0.9cd4b/0.9104f,0.e154/0.b86fc,0.8cd49/0.9136d,0.04c89/0.74a7,0.04c89/0.13f7,0.03dc3/0.92328,0.03dc4/0.b96b6,0.90eed/0.cf345,0.d59d6/0.cf34a,0.cd35d/0.c3525,0.99567/0.c3521,0.04c89/0.010e04,0.04c89/0.38192,0.8764b/0.13f7,0.8764c/0.74a7,0.8764b/0.38193,0.8764b/0.010e04,0.d0b40/0.e3f2,0.9cd4a/0.e3f3,0.e569/0.b86fc,0.8f61b/0.9136d,0.0023b8/0.74a7,0.0023b7/0.13f7,0.0014f1/0.92328,0.0014f3/0.b96b6,0.cd35d/0.c0c53,0.99568/0.c0c50,0.0023b8/0.010e04,0.0023b8/0.38192,0.e3825/0.2311d,0.89d59/0.2311d,0.89d59/0.36536,0.e3825/0.36536,0.e3824/0.050c1,0.89d59/0.050c2,0.89d59/0.011761,0.e3824/0.011761,0.9b206/0.aa387,0.d268e/0.aa37d,0.89d59/0.86f5,0.e3824/0.54591,0.e3824/0.47ef3,0.89d59/0.47ef3,0.97a1d/0.dc859,0.ceea4/0.dc85d,0.a8c37/0.e673c,0.bdc89/0.e673d,0.ac423/0.b4265,0.c1475/0.1203d,0.3947a/0.14a56,0.24427/0.ce75f,0.24429/0.d93f8,0.3947b/0.d93f5,0.3904d/0.1606a,0.23ffb/0.dc423,0.23ffb/0.e70bc,0.3904d/0.e70bd,0.010755/0.ce763,0.0018d0/0.ce765,0.0018d2/0.d93fe,0.010757/0.d93fb,0.5bba4/0.1606a,0.4cd1f/0.1606a,0.4cd1f/0.e70bc,0.5bba4/0.e70bc,0.010328/0.dc423,0.0014a3/0.dc423,0.0014a3/0.e70bc,0.010328/0.e70bc,0.5bfd1/0.ce757,0.4d14c/0.ce759,0.4d14e/0.d93f2,0.5bfd3/0.d93ef,0.ac429/0.be455,0.c147c/0.be453,0.c065e/0.babba,0.11507/0.babbb,0.a85e4/0.f26a4,0.bd636/0.f26a5,0.bc819/0.eee0c,0.a9401/0.eee0a,0.d2695/0.b456f,0.d91c5/0.a705b,0.d5a8b/0.a7067,0.cf9c8/0.b1ddb,0.9089a/0.db2ac,0.973ca/0.e87c0,0.9a097/0.e602c,0.93fd4/0.15eac,0.ce852/0.e87c6,0.d5384/0.db2b3,0.d1c4b/0.db2be,0.cbb85/0.e6031,0.946db/0.10b3d,0.9b20d/0.b4575,0.9deda/0.b1de0,0.97e15/0.a706d,0.0fa30/0.cd115,0.7ee2c/0.cd115,0.7c700/0.0018a7,0.0d303/0.0018a7,0.7fdf5/0.15b2d,0.6fc79/0.d8fc4,0.7239d/0.dfc90,0.7d6d1/0.dfc90,0.7c79f/0.eac0b,0.732cc/0.eac0b,0.6ea63/0.f34d1,0.80ffd/0.18549,0.81ccf/0.ceb7d,0.6df51/0.ce88d,0.8f466/0.dddff,0.853dd/0.dad07,0.81f6e/0.e0c5c,0.8b364/0.e542f,0.6a6ae/0.dacf6,0.6061f/0.162fc,0.6470f/0.e5412,0.6db10/0.e0c53,0.7fc3d/0.e4c51,0.885a1/0.ea764,0.6fe35/0.e4c4f,0.674c7/0.ea74c";
			var geo0faces:String ="0,1,2,0,1,2,3,0,2,3,0,2,4,5,6,4,5,6,7,4,6,7,4,6,7,6,8,7,6,8,9,7,8,9,7,8,a,b,c,a,b,c,d,a,c,d,a,c,e,f,10,e,f,10,11,e,10,11,e,10,9,8,12,9,8,12,13,9,12,13,9,12,14,9,13,14,15,16,15,14,13,17,14,16,16,14,15,18,19,1a,17,16,15,1b,18,1a,8,16,17,1c,1d,1e,12,8,17,1f,1c,1e,13,12,1,13,12,20,0,13,1,21,13,20,15,13,0,17,16,22,3,15,0,23,17,22,17,15,3,1b,1a,24,2,17,3,25,1b,24,12,17,2,1f,1e,26,1,12,2,27,1f,26,7,9,18,7,9,28,19,7,18,29,7,28,4,7,19,4,7,2a,1a,4,19,2b,4,2a,14,4,1a,2c,2d,2e,1b,14,1a,2f,2c,2e,9,14,1b,15,14,30,18,9,1b,31,15,30,8,6,1c,8,6,32,1d,8,1c,33,8,32,16,8,1d,1d,1c,34,1e,16,1d,35,1d,34,5,16,1e,36,37,38,1f,5,1e,39,36,38,6,5,1f,6,5,3a,1c,6,1f,3b,6,3a,19,18,b,29,28,3c,a,19,b,3d,29,3c,1a,19,a,2b,2a,3e,d,1a,a,3f,2b,3e,1b,1a,d,2f,2e,40,c,1b,d,41,2f,40,18,1b,c,31,30,42,b,18,c,43,31,42,1d,1c,f,33,32,44,e,1d,f,45,33,44,1e,1d,e,35,34,46,11,1e,e,47,35,46,1f,1e,11,39,38,48,10,1f,11,49,39,48,1c,1f,10,3b,3a,4a,f,1c,10,4b,3b,4a,20,21,22,4c,4d,4e,23,20,22,4f,4c,4e,24,25,26,50,51,52,27,24,26,53,50,52,4,14,28,2d,2c,54,29,4,28,55,2d,54,2a,2b,2c,56,57,58,2d,2a,2c,59,56,58,16,5,2e,37,36,5a,2f,16,2e,5b,37,5a,27,26,21,53,52,4d,20,27,21,4c,53,4d,2f,2e,30,5b,5a,5c,31,2f,30,5d,5b,5c,2d,2c,23,59,58,4f,22,2d,23,4e,59,4f,29,28,32,55,54,5e,33,29,32,5f,55,5e,33,32,34,60,61,62,35,33,34,63,60,62,31,30,36,64,65,66,37,31,36,67,64,66,28,14,38,68,69,6a,39,28,38,6b,68,6a,16,2f,3a,6c,6d,6e,3b,16,3a,6f,6c,6e,2e,5,3c,70,71,72,3d,2e,3c,73,70,72,4,29,3e,74,75,76,3f,4,3e,77,74,76,32,28,39,61,68,6b,34,32,39,62,61,6b,2f,31,37,6d,64,67,3a,2f,37,6e,6d,67,30,2e,3d,65,70,73,36,30,3d,66,65,73,29,33,35,75,60,63,3e,29,35,76,75,63,35,34,20,78,79,7a,23,35,20,7b,78,7a,37,36,22,7c,7d,7e,21,37,22,7f,7c,7e,39,38,24,80,81,82,27,39,24,83,80,82,3b,3a,26,84,85,86,25,3b,26,87,84,86,3d,3c,2a,88,89,8a,2d,3d,2a,8b,88,8a,3f,3e,2c,8c,8d,8e,2b,3f,2c,8f,8c,8e,34,39,27,79,80,83,20,34,27,7a,79,83,3a,37,21,85,7c,7f,26,3a,21,86,85,7f,36,3d,2d,7d,88,8b,22,36,2d,7e,7d,8b,3e,35,23,8d,78,7b,2c,3e,23,8e,8d,7b,14,16,40,19,18,90,41,14,40,91,19,90,5,4,42,5,4,92,43,5,42,93,5,92,44,45,46,94,95,96,47,44,46,97,94,96,48,49,4a,98,99,9a,4b,48,4a,9b,98,9a,4c,4d,45,9c,9d,95,44,4c,45,94,9c,95,4c,44,47,9e,9f,a0,4e,4c,47,a1,9e,a0,45,4d,4f,a2,a3,a4,46,45,4f,a5,a2,a4,4e,47,50,a1,a0,a6,51,4e,50,a7,a1,a6,47,46,52,97,96,a8,50,47,52,a6,97,a8,46,4f,53,a5,a4,a9,52,46,53,a8,a5,a9,51,50,48,a7,a6,98,4b,51,48,9b,a7,98,50,52,49,a6,a8,99,48,50,49,98,a6,99,52,53,4a,a8,a9,9a,49,52,4a,99,a8,9a";
			var geo0:FacesDefinition = new FacesDefinition();
			geo0.f = buildFaces( geo0faces.split(","),  buildVertices(read(geo0vert).split(",")), buildUVs(read(geo0uvs).split(",")) );
			geos.push(geo0);
		}

		private function buildFaces(aFaces:Array, vVerts:Vector.<Vertex>, vUVs:Vector.<UV>):Vector.<Face>
		{
			var vFaces:Vector.<Face> = new Vector.<Face>();
			var f:Face;
			for(var i:int = 0;i<aFaces.length;i+=6){
				f = new Face( vVerts[parseInt(aFaces[i], 16)],
									vVerts[parseInt(aFaces[i+1], 16)],
									vVerts[parseInt(aFaces[i+2], 16)],
									null,
									vUVs[parseInt(aFaces[i+3], 16)],
									vUVs[parseInt(aFaces[i+4], 16)],
									vUVs[parseInt(aFaces[i+5], 16)]);
				vFaces.push(f);
			}

			return vFaces;
		}

		private function buildVertices(aVerts:Array):Vector.<Vertex>
		{
			var tmpv:Array;
			var vVerts:Vector.<Vertex> = new Vector.<Vertex>();
			for(var i:int = 0;i<aVerts.length;i++){
				tmpv = aVerts[i].split("/");
				vVerts[i] = new Vertex( parseFloat(tmpv[0])*_scale, parseFloat(tmpv[1])*_scale, parseFloat(tmpv[2])*_scale  );
			}
			return vVerts;
		}

		private function buildUVs(aUvs:Array):Vector.<UV>
		{
			var tmpv:Array;
			var vUVs:Vector.<UV> = new Vector.<UV>();
			for(var i:int = 0;i<aUvs.length;++i){
				tmpv = aUvs[i].split("/");
				vUVs[i] = new UV(parseFloat(tmpv[0]), parseFloat(tmpv[1]));
			}

			return vUVs;
		}


		private function buildMaterials():void
		{
				var aw_0_Bitmap:Bitmap = new Aw_0_Bitmap_Bitmap();
				applyMaterialToMesh("aw_0", aw_0_Bitmap.bitmapData);

		}

		private function applyMaterialToMesh(id:String, bmd:BitmapData):void
		{
			for(var i:int;i<meshes.length;++i){
				if(meshes[i].name == id){
					if(!bmd){
						trace("Embed of "+id+" failed! Check source path or if CS4 call 911!");
					} else {
					meshes[i].material = new BitmapMaterial(bmd);
					}
					break;
				}
			}
		}

		private function cleanUp():void
		{
			for(var i:int = 0;i<1;++i){
				objs["obj"+i] == null;
			}
			aV = null;
			aU = null;
		}

		private function addContainers():void
		{}


		public function get meshes():Array
		{
			return oList;
		}


		private function read(str:String):String
		{
			var start:int= 0;
			var chunk:String;
			var end:int= 0;
			var dec:String = "";
			var charcount:int = str.length;
			for(var i:int = 0;i<charcount;++i){
				if (str.charCodeAt(i)>=44 && str.charCodeAt(i)<= 48 ){
					dec+= str.substring(i, i+1);
				}else{
					start = i;
					chunk = "";
					while(str.charCodeAt(i)!=44 && str.charCodeAt(i)!= 45 && str.charCodeAt(i)!= 46 && str.charCodeAt(i)!= 47 && i<=charcount){
						i++;
					}
					chunk = ""+parseInt("0x"+str.substring(start, i), 16 );
					dec+= chunk;
					i--;
				}
			}
			return dec;
		}

	}
}
class FacesDefinition
{
	import away3d.core.base.Face;
	import away3d.core.base.Geometry;
	public var f:Vector.<Face>;
	public var geometry:Geometry;
}