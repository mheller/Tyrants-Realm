//AS3ExporterAIR version 2.3, code Flash 10, generated by Prefab3D: http://www.closier.nl/prefab
package objects.brokencrate
{
	import away3d.containers.ObjectContainer3D;
	import away3d.containers.Scene3D;
	import away3d.materials.*;
	import away3d.core.base.*;
	import away3d.loaders.utils.*;
	import away3d.loaders.data.*;
	import flash.utils.Dictionary;
	import away3d.primitives.*;
	import flash.display.Bitmap;
	import flash.display.BitmapData;

	import flash.geom.*;

	public class Brokencrate extends Mesh
	{
		[Embed(source="images/aw_0.jpg")]
		private var Aw_0_Bitmap_Bitmap:Class;

		private var objs:Object = {};
		private var geos:Array = [];
		private var oList:Array =[];
		private var aC:Array;
		private var aV:Array;
		private var aU:Array;
		private var _scale:Number;

		public function Brokencrate(scale:Number = 1)
		{
			_scale = scale;
			setSource();
			addContainers();
			buildMeshes();
			buildMaterials();
			cleanUp();
		}

		private function buildMeshes():void
		{
			var m0:Matrix3D = new Matrix3D();
			m0.rawData = Vector.<Number>([1,0,0,0,0,1,0,0,0,0,1,0,0*_scale,0*_scale,0*_scale,1]);
			transform = m0;

			objs.obj0 = {name:"aw_0",  transform:m0, pivotPoint:new Vector3D(0,0,0), container:-1, bothsides:false, material:null, ownCanvas:false, pushfront:false, pushback:false};
			objs.obj0.geo=geos[0];

			var ref:Object;
			
			var j:int;
			var av:Array;
			var au:Array;
			var v0:Vertex;
			var v1:Vertex;
			var v2:Vertex;
			var u0:UV;
			var u1:UV;
			var u2:UV;
			var aRef:Vector.<Face>;
			for(var i:int = 0;i<1;++i){
				ref = objs["obj"+i];
				if(ref != null){
					this.type = ".as";
					this.bothsides = ref.bothsides;
					this.name = ref.name;
					this.pushfront = ref.pushfront;
					this.pushback = ref.pushback;
					this.ownCanvas = ref.ownCanvas;

					oList.push(this);
					this.transform = ref.transform;
					this.movePivot(ref.pivotPoint.x, ref.pivotPoint.y, ref.pivotPoint.z);
					if (ref.geo.geometry != null) {
						this.geometry = ref.geo.geometry;
						continue;
					}
					ref.geo.geometry = new Geometry();
					this.geometry = ref.geo.geometry;
					aRef = ref.geo.f;
					for(j = 0;j<aRef.length;++j){
						Face(aRef[j]).material = ref.material;
						ref.geo.geometry.addFace( Face(aRef[j]));
					}

				}
			}
		}

		private function setSource():void
		{
			var geo0vert:String ="-64/-29.2bbdb2e2797fa/-57.473,64/-29.2bbdb2e2797fa/-57.473,64/-19.170999a6f3ff/-57.473,-64/29.1e0f/-57.473,64/-29.2bbdb2e2797fa/52.2269,64/29.1e0f/52.2269,-64/29.1e0f/52.2269,-64/-29.2bbdb2e2797fa/52.2269,64/-42.45bfc83533ff/-3e.69f4c51dc7fb,64/-42.45bfc83533ff/39.2283,-64/-42.45bfc83533ff/39.2283,-64/-42.45bfc83533ff/-3e.69f4c51dc7fb,-7c.26f6/29.1e0f/-3e.69f4c51dc7fb,-7c.26f6/-29.2bbdb2e2797fa/-3e.69f4c51dc7fb,-7c.26f6/-29.2bbdb2e2797fa/39.2283,-7c.26f6/29.1e0f/39.2283,-8c/-51.1e0f/-66.a987a1c93ff,8c/-51.1e0f/-66.a987a1c93ff,8c/-29.2bbdb2e2797fa/-66.a987a1c93ff,-64/-29.2bbdb2e2797fa/-66.a987a1c93ff,-8c/51.1e0f/-66.a987a1c93ff,-64/16.15e3f14b3f80c/-66.a987a1c93ff,-64/29.1e0f/61.2283,-8c/51.1e0f/61.2283,-8c/-51.1e0f/61.2283,-64/-29.2bbdb2e2797fa/61.2283,8c/-51.1e0f/61.2283,64/-29.2bbdb2e2797fa/61.2283,64/-51.1e0f/39.2283,-64/-51.1e0f/39.2283,-64/-51.1e0f/-3e.69f4c51dc7fb,64/-51.1e0f/-3e.69f4c51dc7fb,-8c/-29.2bbdb2e2797fa/-3e.69f4c51dc7fb,-8c/-29.2bbdb2e2797fa/39.2283,-8c/29.1e0f/39.2283,-8c/29.1e0f/-3e.69f4c51dc7fb,8c/-29.2bbdb2e2797fa/39.2283,7c.26f6/-29.2bbdb2e2797fa/-57.473,-64/-29.2bbdb2e2797fa/-57.473,-64/16.15e3f14b3f80c/-57.473,-64/29.1e0f/52.2269,-64/-29.2bbdb2e2797fa/52.2269,64/-29.2bbdb2e2797fa/52.2269,64/3c.43c436150c01/61.2283,64/3c.43c436150c01/52.2269,7c.26f6/-29.2bbdb2e2797fa/39.2283,8c/29.1e0f/39.2283,7c.26f6/29.1e0f/39.2283,8c/3c.43c436150c01/61.2283,7c.26f6/-29.2bbdb2e2797fa/52.2269,7c.26f6/3c.43c436150c01/52.2269,-7d.3b7/4f.1c41/-58.1cbfc6d243ff,-7d.3b7/4f.1c41/54.033f,-7d.3b7/28.2a5aec4ea401/-58.1cbfc6d243ff,-7d.3b7/28.2a5aec4ea401/54.033f,62.20e2/3a.c74531ab9805/61.2283,-8c/51.1e0f/61.2283,-65.bbe/42.17ef/3b.1cea8f2cc1805,61.1cae/2e.59cb5e942401/3b.1cea8f2cc1805,61.10c6/2b.5171fbf08c01/66.a987a1c93ff,-65.17a6/3f.1d9c17b76a805/66.a987a1c93ff,-66.1bd8/34.b4d/3f.1cf9,60.142/20.19ef/3f.1cf9,7c.26f6/-42.45bfc83533ff/-19.3633404cb17fb,7c.26f6/-42.45bfc83533ff/39.2283,7c.26f6/29.1e0f/39.2283,7c.26f6/d.2c2962086a803/-19.3633404cb17fb,70.26f/29.1e0f/39.2283,70.26f/d.2c2962086a803/-19.3633404cb17fb,70.26f/-42.45bfc83533ff/-19.3633404cb17fb,5.25f2/-39.a36b0292bff/-4.36a4c1905c7ff,52.8fe/48.588a102b3c02/37.186151024e806,58.2c20f15d4fff/3f.577bfac7ec01/40.2349,c.1fca/-41.b118c86e3ff/4.379c237fbd801,25.a44136d8b005/-3d.1b4b3f63c3ff/-1d.1bfd,6f.2b003b9adfff/41.2730ac24b401/1d.489,2c.0146/-46.06f/-13.179f,76.cae/38.41797a609c01/27.8e9,63.1c1e/-13.036dc582c3ff/-66.a987a1c93ff,-8c/51.1e0f/-66.a987a1c93ff,-63.329f5a8737ff/17.1051dad83d811/-66.a987a1c93ff,45.13bc/-29.363ee488257fc/-66.a987a1c93ff,53.2366/-4.24313455417fa/-3e.69f4c51dc7fb,-66.1aa8/43.e65/-3e.69f4c51dc7fb,-63.329f5a8737ff/17.1051dad83d811/-57.473,45.13bc/-29.363ee488257fc/-57.473,4e.13b8/-12.23fcd149b77f8/-3e.69f4c51dc7fb,-6c.079a76d48fff/35.e87/-3e.69f4c51dc7fb";
			var geo0uvs:String ="0.de635/0.da7a5,0.de635/0.8dda8,0.137b0/0.8dda8,0.137b0/0.da7a5,0.62d52/0.4751,0.62d52/0.48280,0.016355/0.4827f,0.016354/0.4751,0.91f40/0.577ed,0.91f40/0.485c,0.de138/0.485c,0.de138/0.577ed,0.0166cc/0.d9f77,0.0166cc/0.be6ce,0.41414/0.be6cf,0.41414/0.d9f77,0.f2355/0.edb6a,0.f2355/0.7a9e2,0.e224f/0.dfc5,0.e224f/0.dc79b,0.aefc0/0.edb6a,0.bf0c7/0.dc79b,0.01435f/0.4be99,0.02f8f/0.5bf9f,0.02f8f/0.18c0a,0.01435f/0.28d11,0.76118/0.18c0b,0.19d/0.28d11,0.8f8b4/0.29ac8,0.7e777/0.19412,0.18280/0.19412,0.e07c3/0.29ac9,0.18280/0.abf2,0.e07c4/0.5b0bd,0.7e777/0.abf2,0.8f8b4/0.5b0bd,0.013d51/0.bb252,0.02bbf/0.aa958,0.54f21/0.aa958,0.43d8f/0.bb252,0.54f21/0.edced,0.43d8f/0.dd3f4,0.02bbf/0.edced,0.013d51/0.dd3f4,0.545c3/0.604fc,0.002261/0.604fd,0.0133f3/0.70df6,0.43431/0.70df5,0.de635/0.8dda8,0.de635/0.da7a5,0.137b0/0.da7a5,0.016355/0.4827f,0.016354/0.4751,0.62d52/0.4751,0.63ff0/0.4b551,0.62d52/0.48280,0.015d6e/0.74273,0.40ab7/0.74273,0.012d5f/0.93522,0.015d6e/0.8fb1b,0.76e70/0.587ab,0.0395b/0.a0288,0.4e48b/0.4837,0.4e48b/0.47e18,0.5d66d/0.47e18,0.5d66d/0.4837,0.6511/0.4837,0.6511/0.47e18,0.0df68/0.a0ab2,0.016fad/0.f4ed,0.5dcbc/0.52782,0.6aa76/0.5b68f,0.a8a33/0.e43c0,0.10dd2/0.81ef8,0.a1a8e/0.88b7f,0.a1a8e/0.dd739,0.014789/0.5b8f0,0.5e82c/0.5b8f0,0.5e82c/0.4ab2e,0.014789/0.4ab2e,0.6761e/0.8fb1e,0.9a23/0.8fb1e,0.5eefd/0.aa3aa,0.66d16/0.a54a8,0.4f9b3/0.76a8c,0.4b1e9/0.76678,0.4a690/0.893f6,0.4f9b3/0.8c1b7,0.aae17/0.dd3eb,0.aab39/0.86381,0.9c3a2/0.94c0d,0.9c605/0.dd465,0.02f8f/0.5bf9f,0.76118/0.5bfa0,0.64d49/0.4be99,0.01435f/0.4be99,0.0641a/0.6a098,0.4ec71/0.69e35,0.4ec44/0.6472b,0.09fe/0.6498e,0.62d52/0.48280,0.016355/0.4827f,0.aae45/0.e2af5,0.9c633/0.e2b6f,0.86fa7/0.ab241,0.690e3/0.ab241,0.690e3/0.d1e12,0.86fa7/0.d1e12,0.690e3/0.d64bd,0.86fa8/0.d64bd,0.8b652/0.d1e12,0.8b652/0.ab241,0.59c32/0.ecee1,0.abf94/0.ecee1,0.ab970/0.e59a9,0.5a031/0.e59a9,0.6a11f/0.1626c,0.6a11f/0.8b4d6,0.5a41f/0.8c5cc,0.5a41f/0.dc741,0.5b3d6/0.85aec,0.ab54b/0.85aec,0.ab54b/0.7e16e,0.5b3d6/0.7e16e,0.80cdf/0.78f99,0.7a085/0.78f99,0.7a0fd/0.8baf8,0.ce83/0.8bae1,0.aefc0/0.7a9e2,0.aefc0/0.edb6a,0.bf0c7/0.dc79b,0.bf0c7/0.dfc5,0.59c32/0.79d58,0.59c32/0.ecee1,0.6a2e9/0.dbda4,0.6a2e9/0.8ae95,0.137b0/0.da7a5,0.137b0/0.8dda8,0.6dbb9/0.d9719,0.6dbb9/0.8d520";
			var geo0faces:String ="0,1,2,0,1,2,3,0,2,3,0,2,4,5,6,4,5,6,7,4,6,7,4,6,8,9,a,8,9,a,b,8,a,b,8,a,c,d,e,c,d,e,f,c,e,f,c,e,10,11,12,10,11,12,13,10,12,13,10,12,14,10,13,14,10,13,15,14,13,15,14,13,16,17,18,16,17,18,19,16,18,19,16,18,19,18,1a,19,18,1a,1b,19,1a,1b,19,1a,1c,1a,18,1c,1d,1e,1d,1c,18,1f,1c,1e,1d,18,10,1f,1e,20,1e,1d,10,21,1f,20,11,10,1e,22,20,21,1f,11,1e,23,22,21,1f,11,1a,23,22,1d,1c,1f,1a,1c,23,1d,20,10,18,24,25,26,21,20,18,27,24,26,21,18,17,27,26,28,22,21,17,29,27,28,14,17,22,2a,28,29,23,14,22,2b,2a,29,10,14,23,25,2a,2b,20,10,23,24,25,2b,11,1a,24,2c,2d,2e,12,11,24,2f,2c,2e,13,12,25,13,12,30,26,13,25,31,13,30,15,13,26,15,13,31,27,15,26,32,15,31,19,16,28,19,16,33,29,19,28,34,19,33,1b,19,29,1b,19,34,2a,1b,29,35,1b,34,2b,1b,2a,36,1b,35,2c,2b,2a,37,36,35,1d,1c,9,1f,1c,9,a,1d,9,a,1f,9,1e,1d,a,21,1f,a,b,1e,a,b,21,a,1f,1e,b,23,21,b,8,1f,b,8,23,b,1c,1f,8,1c,23,8,9,1c,8,9,1c,8,21,20,d,27,24,d,e,21,d,e,27,d,22,21,e,29,27,e,f,22,e,f,29,e,23,22,f,2b,29,f,c,23,f,c,2b,f,20,23,c,24,2b,c,d,20,c,d,24,c,12,24,2d,2f,2e,38,25,12,2d,39,2f,38,24,2e,2f,2e,3a,3b,2d,24,2f,38,2e,3b,30,1a,1b,3c,1a,1b,2b,30,1b,36,3c,1b,1a,30,2e,2d,3d,3a,24,1a,2e,2e,2d,3a,31,32,2c,3e,3f,40,2a,31,2c,41,3e,40,2d,2f,32,42,43,3f,31,2d,32,3e,42,3f,32,2f,2e,44,45,3a,30,32,2e,3d,44,3a,2c,32,30,46,47,3c,2b,2c,30,36,46,3c,17,14,33,48,49,4a,34,17,33,4b,48,4a,34,33,35,4c,4d,4e,36,34,35,4f,4c,4e,28,16,17,50,51,52,34,28,17,53,50,52,15,27,33,54,55,56,14,15,33,57,54,56,37,38,39,58,59,5a,3a,37,39,5b,58,5a,38,37,3b,5c,5d,5e,3c,38,3b,5f,5c,5e,3a,39,3d,60,61,62,3e,3a,3d,63,60,62,3c,3b,3e,5f,5e,64,3d,3c,3e,65,5f,64,3b,37,3a,66,58,5b,3e,3b,3a,67,66,5b,3f,40,41,68,69,6a,42,3f,41,6b,68,6a,42,41,43,6b,6a,6c,44,42,43,6d,6b,6c,3f,42,44,68,6b,6e,45,3f,44,6f,68,6e,46,47,48,70,71,72,49,46,48,73,70,72,47,46,4a,74,75,76,4b,47,4a,77,74,76,4b,4a,4c,78,79,7a,4d,4b,4c,7b,78,7a,48,47,4b,7c,7d,7e,4d,48,4b,7f,7c,7e,4e,4f,50,80,81,82,51,4e,50,83,80,82,4f,4e,52,84,85,86,53,4f,52,87,84,86,51,50,54,83,82,88,55,51,54,89,83,88,53,52,56,87,86,8a,57,53,56,8b,87,8a";
			var geo0:FacesDefinition = new FacesDefinition();
			geo0.f = buildFaces( geo0faces.split(","),  buildVertices(read(geo0vert).split(",")), buildUVs(read(geo0uvs).split(",")) );
			geos.push(geo0);
		}

		private function buildFaces(aFaces:Array, vVerts:Vector.<Vertex>, vUVs:Vector.<UV>):Vector.<Face>
		{
			var vFaces:Vector.<Face> = new Vector.<Face>();
			var f:Face;
			for(var i:int = 0;i<aFaces.length;i+=6){
				f = new Face( vVerts[parseInt(aFaces[i], 16)],
									vVerts[parseInt(aFaces[i+1], 16)],
									vVerts[parseInt(aFaces[i+2], 16)],
									null,
									vUVs[parseInt(aFaces[i+3], 16)],
									vUVs[parseInt(aFaces[i+4], 16)],
									vUVs[parseInt(aFaces[i+5], 16)]);
				vFaces.push(f);
			}

			return vFaces;
		}

		private function buildVertices(aVerts:Array):Vector.<Vertex>
		{
			var tmpv:Array;
			var vVerts:Vector.<Vertex> = new Vector.<Vertex>();
			for(var i:int = 0;i<aVerts.length;i++){
				tmpv = aVerts[i].split("/");
				vVerts[i] = new Vertex( parseFloat(tmpv[0])*_scale, parseFloat(tmpv[1])*_scale, parseFloat(tmpv[2])*_scale  );
			}
			return vVerts;
		}

		private function buildUVs(aUvs:Array):Vector.<UV>
		{
			var tmpv:Array;
			var vUVs:Vector.<UV> = new Vector.<UV>();
			for(var i:int = 0;i<aUvs.length;++i){
				tmpv = aUvs[i].split("/");
				vUVs[i] = new UV(parseFloat(tmpv[0]), parseFloat(tmpv[1]));
			}

			return vUVs;
		}


		private function buildMaterials():void
		{
				var aw_0_Bitmap:Bitmap = new Aw_0_Bitmap_Bitmap();
				applyMaterialToMesh("aw_0", aw_0_Bitmap.bitmapData);

		}

		private function applyMaterialToMesh(id:String, bmd:BitmapData):void
		{
			for(var i:int;i<meshes.length;++i){
				if(meshes[i].name == id){
					if(!bmd){
						trace("Embed of "+id+" failed! Check source path or if CS4 call 911!");
					} else {
					meshes[i].material = new BitmapMaterial(bmd);
					}
					break;
				}
			}
		}

		private function cleanUp():void
		{
			for(var i:int = 0;i<1;++i){
				objs["obj"+i] == null;
			}
			aV = null;
			aU = null;
		}

		private function addContainers():void
		{}


		public function get meshes():Array
		{
			return oList;
		}


		private function read(str:String):String
		{
			var start:int= 0;
			var chunk:String;
			var end:int= 0;
			var dec:String = "";
			var charcount:int = str.length;
			for(var i:int = 0;i<charcount;++i){
				if (str.charCodeAt(i)>=44 && str.charCodeAt(i)<= 48 ){
					dec+= str.substring(i, i+1);
				}else{
					start = i;
					chunk = "";
					while(str.charCodeAt(i)!=44 && str.charCodeAt(i)!= 45 && str.charCodeAt(i)!= 46 && str.charCodeAt(i)!= 47 && i<=charcount){
						i++;
					}
					chunk = ""+parseInt("0x"+str.substring(start, i), 16 );
					dec+= chunk;
					i--;
				}
			}
			return dec;
		}

	}
}
class FacesDefinition
{
	import away3d.core.base.Face;
	import away3d.core.base.Geometry;
	public var f:Vector.<Face>;
	public var geometry:Geometry;
}